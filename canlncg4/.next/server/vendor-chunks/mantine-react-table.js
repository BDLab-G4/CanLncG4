"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mantine-react-table";
exports.ids = ["vendor-chunks/mantine-react-table"];
exports.modules = {

/***/ "(ssr)/./node_modules/mantine-react-table/dist/cjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/mantine-react-table/dist/cjs/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/shared/react-jsx-runtime.js\");\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar reactTable = __webpack_require__(/*! @tanstack/react-table */ \"(ssr)/./node_modules/@tanstack/react-table/build/lib/index.js\");\nvar matchSorterUtils = __webpack_require__(/*! @tanstack/match-sorter-utils */ \"(ssr)/./node_modules/@tanstack/match-sorter-utils/build/lib/index.js\");\nvar iconsReact = __webpack_require__(/*! @tabler/icons-react */ \"(ssr)/./node_modules/@tabler/icons-react/dist/esm/tabler-icons-react.js\");\nvar reactVirtual = __webpack_require__(/*! @tanstack/react-virtual */ \"(ssr)/./node_modules/@tanstack/react-virtual/build/lib/index.js\");\nvar core = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/cjs/index.js\");\nvar hooks = __webpack_require__(/*! @mantine/hooks */ \"(ssr)/./node_modules/@mantine/hooks/cjs/index.js\");\nvar dates = __webpack_require__(/*! @mantine/dates */ \"(ssr)/./node_modules/@mantine/dates/cjs/index.js\");\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nconst MRT_AggregationFns = Object.assign({}, reactTable.aggregationFns);\n\nconst fuzzy$1 = (row, columnId, filterValue, addMeta) => {\n    const itemRank = matchSorterUtils.rankItem(row.getValue(columnId), filterValue, {\n        threshold: matchSorterUtils.rankings.MATCHES,\n    });\n    addMeta(itemRank);\n    return itemRank.passed;\n};\nfuzzy$1.autoRemove = (val) => !val;\nconst contains = (row, id, filterValue) => row\n    .getValue(id)\n    .toString()\n    .toLowerCase()\n    .trim()\n    .includes(filterValue.toString().toLowerCase().trim());\ncontains.autoRemove = (val) => !val;\nconst startsWith = (row, id, filterValue) => row\n    .getValue(id)\n    .toString()\n    .toLowerCase()\n    .trim()\n    .startsWith(filterValue.toString().toLowerCase().trim());\nstartsWith.autoRemove = (val) => !val;\nconst endsWith = (row, id, filterValue) => row\n    .getValue(id)\n    .toString()\n    .toLowerCase()\n    .trim()\n    .endsWith(filterValue.toString().toLowerCase().trim());\nendsWith.autoRemove = (val) => !val;\nconst equals = (row, id, filterValue) => filterValue === null\n    ? true\n    : row.getValue(id).toString().toLowerCase().trim() ===\n        filterValue.toString().toLowerCase().trim();\nequals.autoRemove = (val) => !val;\nconst notEquals = (row, id, filterValue) => row.getValue(id).toString().toLowerCase().trim() !==\n    filterValue.toString().toLowerCase().trim();\nnotEquals.autoRemove = (val) => !val;\nconst greaterThan = (row, id, filterValue) => filterValue === null\n    ? true\n    : !isNaN(+filterValue) && !isNaN(+row.getValue(id))\n        ? +row.getValue(id) > +filterValue\n        : row.getValue(id).toString().toLowerCase().trim() >\n            filterValue.toString().toLowerCase().trim();\ngreaterThan.autoRemove = (val) => !val;\nconst greaterThanOrEqualTo = (row, id, filterValue) => equals(row, id, filterValue) || greaterThan(row, id, filterValue);\ngreaterThanOrEqualTo.autoRemove = (val) => !val;\nconst lessThan = (row, id, filterValue) => filterValue === null\n    ? true\n    : !isNaN(+filterValue) && !isNaN(+row.getValue(id))\n        ? +row.getValue(id) < +filterValue\n        : row.getValue(id).toString().toLowerCase().trim() <\n            filterValue.toString().toLowerCase().trim();\nlessThan.autoRemove = (val) => !val;\nconst lessThanOrEqualTo = (row, id, filterValue) => equals(row, id, filterValue) || lessThan(row, id, filterValue);\nlessThanOrEqualTo.autoRemove = (val) => !val;\nconst between = (row, id, filterValues) => (['', undefined].includes(filterValues[0]) ||\n    greaterThan(row, id, filterValues[0])) &&\n    ((!isNaN(+filterValues[0]) &&\n        !isNaN(+filterValues[1]) &&\n        +filterValues[0] > +filterValues[1]) ||\n        ['', undefined].includes(filterValues[1]) ||\n        lessThan(row, id, filterValues[1]));\nbetween.autoRemove = (val) => !val;\nconst betweenInclusive = (row, id, filterValues) => (['', undefined].includes(filterValues[0]) ||\n    greaterThanOrEqualTo(row, id, filterValues[0])) &&\n    ((!isNaN(+filterValues[0]) &&\n        !isNaN(+filterValues[1]) &&\n        +filterValues[0] > +filterValues[1]) ||\n        ['', undefined].includes(filterValues[1]) ||\n        lessThanOrEqualTo(row, id, filterValues[1]));\nbetweenInclusive.autoRemove = (val) => !val;\nconst empty = (row, id, _filterValue) => !row.getValue(id).toString().trim();\nempty.autoRemove = (val) => !val;\nconst notEmpty = (row, id, _filterValue) => !!row.getValue(id).toString().trim();\nnotEmpty.autoRemove = (val) => !val;\nconst MRT_FilterFns = Object.assign(Object.assign({}, reactTable.filterFns), { between,\n    betweenInclusive,\n    contains,\n    empty,\n    endsWith,\n    equals,\n    fuzzy: fuzzy$1,\n    greaterThan,\n    greaterThanOrEqualTo,\n    lessThan,\n    lessThanOrEqualTo,\n    notEmpty,\n    notEquals,\n    startsWith });\n\nconst fuzzy = (rowA, rowB, columnId) => {\n    let dir = 0;\n    if (rowA.columnFiltersMeta[columnId]) {\n        dir = matchSorterUtils.compareItems(rowA.columnFiltersMeta[columnId], rowB.columnFiltersMeta[columnId]);\n    }\n    // Provide a fallback for when the item ranks are equal\n    return dir === 0\n        ? reactTable.sortingFns.alphanumeric(rowA, rowB, columnId)\n        : dir;\n};\nconst MRT_SortingFns = Object.assign(Object.assign({}, reactTable.sortingFns), { fuzzy });\nconst rankGlobalFuzzy = (rowA, rowB) => Math.max(...Object.values(rowB.columnFiltersMeta).map((v) => v.rank)) -\n    Math.max(...Object.values(rowA.columnFiltersMeta).map((v) => v.rank));\n\nconst getColumnId = (columnDef) => { var _a, _b, _c, _d; return (_d = (_a = columnDef.id) !== null && _a !== void 0 ? _a : (_c = (_b = columnDef.accessorKey) === null || _b === void 0 ? void 0 : _b.toString) === null || _c === void 0 ? void 0 : _c.call(_b)) !== null && _d !== void 0 ? _d : columnDef.header; };\nconst getAllLeafColumnDefs = (columns) => {\n    const allLeafColumnDefs = [];\n    const getLeafColumns = (cols) => {\n        cols.forEach((col) => {\n            if (col.columns) {\n                getLeafColumns(col.columns);\n            }\n            else {\n                allLeafColumnDefs.push(col);\n            }\n        });\n    };\n    getLeafColumns(columns);\n    return allLeafColumnDefs;\n};\nconst prepareColumns = ({ aggregationFns, columnDefs, columnFilterFns, defaultDisplayColumn, filterFns, sortingFns, }) => columnDefs.map((columnDef) => {\n    var _a, _b;\n    //assign columnId\n    if (!columnDef.id)\n        columnDef.id = getColumnId(columnDef);\n    if ( true && !columnDef.id) {\n        console.error('Column definitions must have a valid `accessorKey` or `id` property');\n    }\n    //assign columnDefType\n    if (!columnDef.columnDefType)\n        columnDef.columnDefType = 'data';\n    if ((_a = columnDef.columns) === null || _a === void 0 ? void 0 : _a.length) {\n        columnDef.columnDefType = 'group';\n        //recursively prepare columns if this is a group column\n        columnDef.columns = prepareColumns({\n            aggregationFns,\n            columnDefs: columnDef.columns,\n            columnFilterFns,\n            defaultDisplayColumn,\n            filterFns,\n            sortingFns,\n        });\n    }\n    else if (columnDef.columnDefType === 'data') {\n        //assign aggregationFns if multiple aggregationFns are provided\n        if (Array.isArray(columnDef.aggregationFn)) {\n            const aggFns = columnDef.aggregationFn;\n            columnDef.aggregationFn = (columnId, leafRows, childRows) => aggFns.map((fn) => { var _a; return (_a = aggregationFns[fn]) === null || _a === void 0 ? void 0 : _a.call(aggregationFns, columnId, leafRows, childRows); });\n        }\n        //assign filterFns\n        if (Object.keys(filterFns).includes(columnFilterFns[columnDef.id])) {\n            columnDef.filterFn =\n                (_b = filterFns[columnFilterFns[columnDef.id]]) !== null && _b !== void 0 ? _b : filterFns.fuzzy;\n            columnDef._filterFn =\n                columnFilterFns[columnDef.id];\n        }\n        //assign sortingFns\n        if (Object.keys(sortingFns).includes(columnDef.sortingFn)) {\n            // @ts-ignore\n            columnDef.sortingFn = sortingFns[columnDef.sortingFn];\n        }\n    }\n    else if (columnDef.columnDefType === 'display') {\n        columnDef = Object.assign(Object.assign({}, defaultDisplayColumn), columnDef);\n    }\n    return columnDef;\n});\nconst reorderColumn = (draggedColumn, targetColumn, columnOrder) => {\n    if (draggedColumn.getCanPin()) {\n        draggedColumn.pin(targetColumn.getIsPinned());\n    }\n    columnOrder.splice(columnOrder.indexOf(targetColumn.id), 0, columnOrder.splice(columnOrder.indexOf(draggedColumn.id), 1)[0]);\n    return [...columnOrder];\n};\nconst showExpandColumn = (props, grouping) => !!(props.enableExpanding ||\n    (props.enableGrouping && (grouping === undefined || (grouping === null || grouping === void 0 ? void 0 : grouping.length))) ||\n    props.renderDetailPanel);\nconst getLeadingDisplayColumnIds = (props) => {\n    var _a;\n    return [\n        (props.enableRowDragging || props.enableRowOrdering) && 'mrt-row-drag',\n        props.positionActionsColumn === 'first' &&\n            (props.enableRowActions ||\n                (props.enableEditing &&\n                    ['row', 'modal', 'custom'].includes((_a = props.editDisplayMode) !== null && _a !== void 0 ? _a : ''))) &&\n            'mrt-row-actions',\n        props.positionExpandColumn === 'first' &&\n            showExpandColumn(props) &&\n            'mrt-row-expand',\n        props.enableRowSelection && 'mrt-row-select',\n        props.enableRowNumbers && 'mrt-row-numbers',\n    ].filter(Boolean);\n};\nconst getTrailingDisplayColumnIds = (props) => {\n    var _a;\n    return [\n        props.positionActionsColumn === 'last' &&\n            (props.enableRowActions ||\n                (props.enableEditing &&\n                    ['row', 'modal'].includes((_a = props.editDisplayMode) !== null && _a !== void 0 ? _a : ''))) &&\n            'mrt-row-actions',\n        props.positionExpandColumn === 'last' &&\n            showExpandColumn(props) &&\n            'mrt-row-expand',\n    ].filter(Boolean);\n};\nconst getDefaultColumnOrderIds = (props) => {\n    const leadingDisplayCols = getLeadingDisplayColumnIds(props);\n    const trailingDisplayCols = getTrailingDisplayColumnIds(props);\n    const allLeafColumnDefs = getAllLeafColumnDefs(props.columns)\n        .map((columnDef) => getColumnId(columnDef))\n        .filter((columnId) => !leadingDisplayCols.includes(columnId) &&\n        !trailingDisplayCols.includes(columnId));\n    return [...leadingDisplayCols, ...allLeafColumnDefs, ...trailingDisplayCols];\n};\nconst getDefaultColumnFilterFn = (columnDef) => {\n    const { filterVariant } = columnDef;\n    if (filterVariant === 'multi-select')\n        return 'arrIncludesSome';\n    if (['range', 'date-range', 'range-slider'].includes(filterVariant || ''))\n        return 'betweenInclusive';\n    if (['select', 'checkbox', 'date'].includes(filterVariant || ''))\n        return 'equals';\n    return 'fuzzy';\n};\nconst getIsFirstColumn = (column, table) => {\n    return table.getVisibleLeafColumns()[0].id === column.id;\n};\nconst getIsLastColumn = (column, table) => {\n    const columns = table.getVisibleLeafColumns();\n    return columns[columns.length - 1].id === column.id;\n};\nconst getIsLastLeftPinnedColumn = (table, column) => {\n    return (column.getIsPinned() === 'left' &&\n        table.getLeftLeafHeaders().length - 1 === column.getPinnedIndex());\n};\nconst getIsFirstRightPinnedColumn = (column) => {\n    return column.getIsPinned() === 'right' && column.getPinnedIndex() === 0;\n};\nconst getTotalRight = (table, column) => {\n    return table\n        .getRightLeafHeaders()\n        .slice(column.getPinnedIndex() + 1)\n        .reduce((acc, col) => acc + col.getSize(), 0);\n};\nconst getCanRankRows = (table) => {\n    const { options, getState } = table;\n    const { manualExpanding, manualFiltering, manualGrouping, manualSorting, enableGlobalFilterRankedResults, } = options;\n    const { globalFilterFn, expanded } = getState();\n    return (!manualExpanding &&\n        !manualFiltering &&\n        !manualGrouping &&\n        !manualSorting &&\n        enableGlobalFilterRankedResults &&\n        globalFilterFn === 'fuzzy' &&\n        expanded !== true &&\n        !Object.values(expanded).some(Boolean));\n};\nconst getCommonCellStyles = ({ column, header, isStriped, row, table, tableCellProps, theme, }) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    const widthStyles = {\n        minWidth: `max(calc(var(--${header ? 'header' : 'col'}-${parseCSSVarId((_a = header === null || header === void 0 ? void 0 : header.id) !== null && _a !== void 0 ? _a : column.id)}-size) * 1px), ${(_b = column.columnDef.minSize) !== null && _b !== void 0 ? _b : 30}px)`,\n        width: `calc(var(--${header ? 'header' : 'col'}-${parseCSSVarId((_c = header === null || header === void 0 ? void 0 : header.id) !== null && _c !== void 0 ? _c : column.id)}-size) * 1px)`,\n    };\n    return Object.assign(Object.assign(Object.assign({ backgroundColor: row\n            ? (row === null || row === void 0 ? void 0 : row.getIsSelected())\n                ? theme.fn.rgba(getPrimaryColor(theme), 0.1)\n                : column.getIsPinned() && column.columnDef.columnDefType !== 'group'\n                    ? theme.fn.rgba(theme.colorScheme === 'dark'\n                        ? theme.fn.darken(theme.colors.dark[7], 0.02)\n                        : theme.white, 0.97)\n                    : isStriped\n                        ? 'inherit'\n                        : theme.colorScheme === 'dark'\n                            ? theme.fn.lighten(theme.colors.dark[7], 0.02)\n                            : theme.white\n            : 'inherit', backgroundClip: 'padding-box', boxShadow: getIsLastLeftPinnedColumn(table, column)\n            ? `-4px 0 8px -6px ${theme.fn.rgba(theme.black, 0.2)} inset`\n            : getIsFirstRightPinnedColumn(column)\n                ? `4px 0 8px -6px ${theme.fn.rgba(theme.black, 0.2)} inset`\n                : undefined, display: table.options.layoutMode === 'grid' ? 'flex' : 'table-cell', flex: table.options.layoutMode === 'grid'\n            ? `var(--${header ? 'header' : 'col'}-${parseCSSVarId((_d = header === null || header === void 0 ? void 0 : header.id) !== null && _d !== void 0 ? _d : column.id)}-size) 0 auto`\n            : undefined, left: column.getIsPinned() === 'left'\n            ? `${column.getStart('left')}px`\n            : undefined, ml: table.options.enableColumnVirtualization &&\n            column.getIsPinned() === 'left' &&\n            column.getPinnedIndex() === 0\n            ? `-${column.getSize() *\n                ((_f = (_e = table.getState().columnPinning.left) === null || _e === void 0 ? void 0 : _e.length) !== null && _f !== void 0 ? _f : 1)}px`\n            : undefined, mr: table.options.enableColumnVirtualization &&\n            column.getIsPinned() === 'right' &&\n            column.getPinnedIndex() === table.getVisibleLeafColumns().length - 1\n            ? `-${column.getSize() *\n                ((_h = (_g = table.getState().columnPinning.right) === null || _g === void 0 ? void 0 : _g.length) !== null && _h !== void 0 ? _h : 1) *\n                1.2}px`\n            : undefined, opacity: ((_j = table.getState().draggingColumn) === null || _j === void 0 ? void 0 : _j.id) === column.id ||\n            ((_k = table.getState().hoveredColumn) === null || _k === void 0 ? void 0 : _k.id) === column.id\n            ? 0.5\n            : 1, position: column.getIsPinned() && column.columnDef.columnDefType !== 'group'\n            ? 'sticky'\n            : undefined, right: column.getIsPinned() === 'right'\n            ? `${getTotalRight(table, column)}px`\n            : undefined, transition: table.options.enableColumnVirtualization\n            ? 'none'\n            : `padding 100ms ease-in-out` }, (!table.options.enableColumnResizing && widthStyles)), ((tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.sx) instanceof Function\n        ? tableCellProps.sx(theme)\n        : tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.sx)), (table.options.enableColumnResizing && widthStyles));\n};\nconst MRT_DefaultColumn = {\n    filterVariant: 'text',\n    minSize: 40,\n    maxSize: 1000,\n    size: 180,\n};\nconst MRT_DefaultDisplayColumn = {\n    columnDefType: 'display',\n    enableClickToCopy: false,\n    enableColumnActions: false,\n    enableColumnDragging: false,\n    enableColumnFilter: false,\n    enableColumnOrdering: false,\n    enableEditing: false,\n    enableGlobalFilter: false,\n    enableGrouping: false,\n    enableHiding: false,\n    enableResizing: false,\n    enableSorting: false,\n};\nconst getPrimaryShade = (theme) => {\n    var _a, _b, _c, _d, _e;\n    return (_e = (theme.colorScheme === 'dark'\n        ? // @ts-ignore\n            (_b = (_a = theme.primaryShade) === null || _a === void 0 ? void 0 : _a.dark) !== null && _b !== void 0 ? _b : theme.primaryShade\n        : // @ts-ignore\n            (_d = (_c = theme.primaryShade) === null || _c === void 0 ? void 0 : _c.light) !== null && _d !== void 0 ? _d : theme.primaryShade)) !== null && _e !== void 0 ? _e : 7;\n};\nconst getPrimaryColor = (theme, shade) => theme.colors[theme.primaryColor][shade !== null && shade !== void 0 ? shade : getPrimaryShade(theme)];\nconst parseCSSVarId = (id) => id.replace(/[^a-zA-Z0-9]/g, '_');\nconst flexRender = reactTable.flexRender;\nconst createRow = (table, originalRow) => reactTable.createRow(table, 'mrt-row-create', originalRow !== null && originalRow !== void 0 ? originalRow : Object.assign({}, ...getAllLeafColumnDefs(table.options.columns)\n    .filter((c) => c.columnDefType === 'data')\n    .map((col) => ({\n    [getColumnId(col)]: '',\n}))), -1, 0);\n\nconst MRT_Localization_EN = {\n    actions: 'Actions',\n    and: 'and',\n    cancel: 'Cancel',\n    changeFilterMode: 'Change filter mode',\n    changeSearchMode: 'Change search mode',\n    clearFilter: 'Clear filter',\n    clearSearch: 'Clear search',\n    clearSort: 'Clear sort',\n    clickToCopy: 'Click to copy',\n    collapse: 'Collapse',\n    collapseAll: 'Collapse all',\n    columnActions: 'Column Actions',\n    copiedToClipboard: 'Copied to clipboard',\n    dropToGroupBy: 'Drop to group by {column}',\n    edit: 'Edit',\n    expand: 'Expand',\n    expandAll: 'Expand all',\n    filterArrIncludes: 'Includes',\n    filterArrIncludesAll: 'Includes all',\n    filterArrIncludesSome: 'Includes',\n    filterBetween: 'Between',\n    filterBetweenInclusive: 'Between Inclusive',\n    filterByColumn: 'Filter by {column}',\n    filterContains: 'Contains',\n    filterEmpty: 'Empty',\n    filterEndsWith: 'Ends With',\n    filterEquals: 'Equals',\n    filterEqualsString: 'Equals',\n    filterFuzzy: 'Fuzzy',\n    filterGreaterThan: 'Greater Than',\n    filterGreaterThanOrEqualTo: 'Greater Than Or Equal To',\n    filterInNumberRange: 'Between',\n    filterIncludesString: 'Contains',\n    filterIncludesStringSensitive: 'Contains',\n    filterLessThan: 'Less Than',\n    filterLessThanOrEqualTo: 'Less Than Or Equal To',\n    filterMode: 'Filter Mode: {filterType}',\n    filterNotEmpty: 'Not Empty',\n    filterNotEquals: 'Not Equals',\n    filterStartsWith: 'Starts With',\n    filterWeakEquals: 'Equals',\n    filteringByColumn: 'Filtering by {column} - {filterType} {filterValue}',\n    goToFirstPage: 'Go to first page',\n    goToLastPage: 'Go to last page',\n    goToNextPage: 'Go to next page',\n    goToPreviousPage: 'Go to previous page',\n    grab: 'Grab',\n    groupByColumn: 'Group by {column}',\n    groupedBy: 'Grouped by ',\n    hideAll: 'Hide all',\n    hideColumn: 'Hide {column} column',\n    max: 'Max',\n    min: 'Min',\n    move: 'Move',\n    noRecordsToDisplay: 'No records to display',\n    noResultsFound: 'No results found',\n    of: 'of',\n    or: 'or',\n    pinToLeft: 'Pin to left',\n    pinToRight: 'Pin to right',\n    resetColumnSize: 'Reset column size',\n    resetOrder: 'Reset order',\n    rowActions: 'Row Actions',\n    rowNumber: '#',\n    rowNumbers: 'Row Numbers',\n    rowsPerPage: 'Rows per page',\n    save: 'Save',\n    search: 'Search',\n    selectedCountOfRowCountRowsSelected: '{selectedCount} of {rowCount} row(s) selected',\n    select: 'Select',\n    showAll: 'Show all',\n    showAllColumns: 'Show all columns',\n    showHideColumns: 'Show/Hide columns',\n    showHideFilters: 'Show/Hide filters',\n    showHideSearch: 'Show/Hide search',\n    sortByColumnAsc: 'Sort by {column} ascending',\n    sortByColumnDesc: 'Sort by {column} descending',\n    sortedByColumnAsc: 'Sorted by {column} ascending',\n    sortedByColumnDesc: 'Sorted by {column} descending',\n    thenBy: ', then by ',\n    toggleDensity: 'Toggle density',\n    toggleFullScreen: 'Toggle full screen',\n    toggleSelectAll: 'Toggle select all',\n    toggleSelectRow: 'Toggle select row',\n    toggleVisibility: 'Toggle visibility',\n    ungroupByColumn: 'Ungroup by {column}',\n    unpin: 'Unpin',\n    unpinAll: 'Unpin all',\n};\n\nconst MRT_Default_Icons = {\n    IconArrowAutofitContent: iconsReact.IconArrowAutofitContent,\n    IconArrowsSort: iconsReact.IconArrowsSort,\n    IconBaselineDensityLarge: iconsReact.IconBaselineDensityLarge,\n    IconBaselineDensityMedium: iconsReact.IconBaselineDensityMedium,\n    IconBaselineDensitySmall: iconsReact.IconBaselineDensitySmall,\n    IconBoxMultiple: iconsReact.IconBoxMultiple,\n    IconChevronDown: iconsReact.IconChevronDown,\n    IconChevronLeft: iconsReact.IconChevronLeft,\n    IconChevronLeftPipe: iconsReact.IconChevronLeftPipe,\n    IconChevronRight: iconsReact.IconChevronRight,\n    IconChevronRightPipe: iconsReact.IconChevronRightPipe,\n    IconChevronsDown: iconsReact.IconChevronsDown,\n    IconCircleX: iconsReact.IconCircleX,\n    IconClearAll: iconsReact.IconClearAll,\n    IconColumns: iconsReact.IconColumns,\n    IconDeviceFloppy: iconsReact.IconDeviceFloppy,\n    IconDots: iconsReact.IconDots,\n    IconDotsVertical: iconsReact.IconDotsVertical,\n    IconEdit: iconsReact.IconEdit,\n    IconEyeOff: iconsReact.IconEyeOff,\n    IconFilter: iconsReact.IconFilter,\n    IconFilterCog: iconsReact.IconFilterCog,\n    IconFilterOff: iconsReact.IconFilterOff,\n    IconGripHorizontal: iconsReact.IconGripHorizontal,\n    IconMaximize: iconsReact.IconMaximize,\n    IconMinimize: iconsReact.IconMinimize,\n    IconPinned: iconsReact.IconPinned,\n    IconPinnedOff: iconsReact.IconPinnedOff,\n    IconSearch: iconsReact.IconSearch,\n    IconSearchOff: iconsReact.IconSearchOff,\n    IconSortAscending: iconsReact.IconSortAscending,\n    IconSortDescending: iconsReact.IconSortDescending,\n    IconX: iconsReact.IconX,\n};\n\nconst useMRT_TableOptions = (_a) => {\n    var _b;\n    var { aggregationFns, autoResetExpanded = false, columnFilterDisplayMode = 'subheader', columnResizeMode = 'onChange', createDisplayMode = 'modal', defaultColumn, defaultDisplayColumn, editDisplayMode = 'modal', enableBottomToolbar = true, enableColumnActions = true, enableColumnFilters = true, enableColumnOrdering = false, enableColumnResizing = false, enableDensityToggle = true, enableExpandAll = true, enableExpanding, enableFilterMatchHighlighting = true, enableFilters = true, enableFullScreenToggle = true, enableGlobalFilter = true, enableGlobalFilterRankedResults = true, enableGrouping = false, enableHiding = true, enableMultiRowSelection = true, enableMultiSort = true, enablePagination = true, enablePinning = false, enableRowSelection = false, enableSelectAll = true, enableSorting = true, enableStickyHeader = false, enableTableFooter = true, enableTableHead = true, enableToolbarInternalActions = true, enableTopToolbar = true, filterFns, icons, layoutMode = 'semantic', localization, manualFiltering, manualGrouping, manualPagination, manualSorting, paginationDisplayMode = 'default', positionActionsColumn = 'first', positionExpandColumn = 'first', positionGlobalFilter = 'right', positionPagination = 'bottom', positionToolbarAlertBanner = 'top', positionToolbarDropZone = 'top', rowNumberMode = 'static', selectAllMode = 'page', sortingFns } = _a, rest = __rest(_a, [\"aggregationFns\", \"autoResetExpanded\", \"columnFilterDisplayMode\", \"columnResizeMode\", \"createDisplayMode\", \"defaultColumn\", \"defaultDisplayColumn\", \"editDisplayMode\", \"enableBottomToolbar\", \"enableColumnActions\", \"enableColumnFilters\", \"enableColumnOrdering\", \"enableColumnResizing\", \"enableDensityToggle\", \"enableExpandAll\", \"enableExpanding\", \"enableFilterMatchHighlighting\", \"enableFilters\", \"enableFullScreenToggle\", \"enableGlobalFilter\", \"enableGlobalFilterRankedResults\", \"enableGrouping\", \"enableHiding\", \"enableMultiRowSelection\", \"enableMultiSort\", \"enablePagination\", \"enablePinning\", \"enableRowSelection\", \"enableSelectAll\", \"enableSorting\", \"enableStickyHeader\", \"enableTableFooter\", \"enableTableHead\", \"enableToolbarInternalActions\", \"enableTopToolbar\", \"filterFns\", \"icons\", \"layoutMode\", \"localization\", \"manualFiltering\", \"manualGrouping\", \"manualPagination\", \"manualSorting\", \"paginationDisplayMode\", \"positionActionsColumn\", \"positionExpandColumn\", \"positionGlobalFilter\", \"positionPagination\", \"positionToolbarAlertBanner\", \"positionToolbarDropZone\", \"rowNumberMode\", \"selectAllMode\", \"sortingFns\"]);\n    const _icons = react.useMemo(() => (Object.assign(Object.assign({}, MRT_Default_Icons), icons)), [icons]);\n    const _localization = react.useMemo(() => (Object.assign(Object.assign({}, MRT_Localization_EN), localization)), [localization]);\n    const _aggregationFns = react.useMemo(() => (Object.assign(Object.assign({}, MRT_AggregationFns), aggregationFns)), []);\n    const _filterFns = react.useMemo(() => (Object.assign(Object.assign({}, MRT_FilterFns), filterFns)), []);\n    const _sortingFns = react.useMemo(() => (Object.assign(Object.assign({}, MRT_SortingFns), sortingFns)), []);\n    const _defaultColumn = react.useMemo(() => (Object.assign(Object.assign({}, MRT_DefaultColumn), defaultColumn)), [defaultColumn]);\n    const _defaultDisplayColumn = react.useMemo(() => (Object.assign(Object.assign({}, MRT_DefaultDisplayColumn), defaultDisplayColumn)), [defaultDisplayColumn]);\n    if (rest.enableRowVirtualization || rest.enableColumnVirtualization) {\n        layoutMode = 'grid';\n    }\n    if (rest.enableRowVirtualization) {\n        enableStickyHeader = true;\n    }\n    if (enablePagination === false && manualPagination === undefined) {\n        manualPagination = true;\n    }\n    if (!((_b = rest.data) === null || _b === void 0 ? void 0 : _b.length)) {\n        manualFiltering = true;\n        manualGrouping = true;\n        manualPagination = true;\n        manualSorting = true;\n    }\n    return Object.assign({ aggregationFns: _aggregationFns, autoResetExpanded,\n        columnFilterDisplayMode,\n        columnResizeMode,\n        createDisplayMode, defaultColumn: _defaultColumn, defaultDisplayColumn: _defaultDisplayColumn, editDisplayMode,\n        enableBottomToolbar,\n        enableColumnActions,\n        enableColumnFilters,\n        enableColumnOrdering,\n        enableColumnResizing,\n        enableDensityToggle,\n        enableExpandAll,\n        enableExpanding,\n        enableFilterMatchHighlighting,\n        enableFilters,\n        enableFullScreenToggle,\n        enableGlobalFilter,\n        enableGlobalFilterRankedResults,\n        enableGrouping,\n        enableHiding,\n        enableMultiRowSelection,\n        enableMultiSort,\n        enablePagination,\n        enablePinning,\n        enableRowSelection,\n        enableSelectAll,\n        enableSorting,\n        enableStickyHeader,\n        enableTableFooter,\n        enableTableHead,\n        enableToolbarInternalActions,\n        enableTopToolbar, filterFns: _filterFns, icons: _icons, layoutMode, localization: _localization, manualFiltering,\n        manualGrouping,\n        manualPagination,\n        manualSorting,\n        paginationDisplayMode,\n        positionActionsColumn,\n        positionExpandColumn,\n        positionGlobalFilter,\n        positionPagination,\n        positionToolbarAlertBanner,\n        positionToolbarDropZone,\n        rowNumberMode,\n        selectAllMode, sortingFns: _sortingFns }, rest);\n};\n\nconst MRT_EditCellTextInput = ({ cell, table, }) => {\n    var _a;\n    const { getState, options: { createDisplayMode, editDisplayMode, mantineEditTextInputProps, mantineEditSelectProps, }, refs: { editInputRefs }, setEditingCell, setEditingRow, setCreatingRow, } = table;\n    const { column, row } = cell;\n    const { columnDef } = column;\n    const { creatingRow, editingRow } = getState();\n    const isCreating = (creatingRow === null || creatingRow === void 0 ? void 0 : creatingRow.id) === row.id;\n    const isEditing = (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) === row.id;\n    const isSelectEdit = columnDef.editVariant === 'select';\n    const [value, setValue] = react.useState(() => cell.getValue());\n    const mTableBodyCellEditTextInputProps = mantineEditTextInputProps instanceof Function\n        ? mantineEditTextInputProps({ cell, column, row, table })\n        : mantineEditTextInputProps;\n    const mcTableBodyCellEditTextInputProps = columnDef.mantineEditTextInputProps instanceof Function\n        ? columnDef.mantineEditTextInputProps({\n            cell,\n            column,\n            row,\n            table,\n        })\n        : columnDef.mantineEditTextInputProps;\n    const textInputProps = Object.assign(Object.assign({}, mTableBodyCellEditTextInputProps), mcTableBodyCellEditTextInputProps);\n    const mTableBodyCellEditSelectProps = mantineEditSelectProps instanceof Function\n        ? mantineEditSelectProps({ cell, column, row, table })\n        : mantineEditSelectProps;\n    const mcTableBodyCellEditSelectProps = columnDef.mantineEditSelectProps instanceof Function\n        ? columnDef.mantineEditSelectProps({\n            cell,\n            column,\n            row,\n            table,\n        })\n        : columnDef.mantineEditSelectProps;\n    const selectProps = Object.assign(Object.assign({}, mTableBodyCellEditSelectProps), mcTableBodyCellEditSelectProps);\n    const saveInputValueToRowCache = (newValue) => {\n        //@ts-ignore\n        row._valuesCache[column.id] = newValue;\n        if (isCreating) {\n            setCreatingRow(row);\n        }\n        else if (isEditing) {\n            setEditingRow(row);\n        }\n    };\n    const handleBlur = (event) => {\n        var _a;\n        (_a = textInputProps.onBlur) === null || _a === void 0 ? void 0 : _a.call(textInputProps, event);\n        saveInputValueToRowCache(value);\n        setEditingCell(null);\n    };\n    const handleEnterKeyDown = (event) => {\n        var _a, _b;\n        (_a = textInputProps.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(textInputProps, event);\n        if (event.key === 'Enter') {\n            (_b = editInputRefs.current[cell.id]) === null || _b === void 0 ? void 0 : _b.blur();\n        }\n    };\n    if (columnDef.Edit) {\n        return (_a = columnDef.Edit) === null || _a === void 0 ? void 0 : _a.call(columnDef, { cell, column, row, table });\n    }\n    const commonProps = {\n        disabled: (columnDef.enableEditing instanceof Function\n            ? columnDef.enableEditing(row)\n            : columnDef.enableEditing) === false,\n        label: ['modal', 'custom'].includes((isCreating ? createDisplayMode : editDisplayMode))\n            ? column.columnDef.header\n            : undefined,\n        name: cell.id,\n        placeholder: !['modal', 'custom'].includes((isCreating ? createDisplayMode : editDisplayMode))\n            ? columnDef.header\n            : undefined,\n        value,\n        variant: editDisplayMode === 'table' ? 'unstyled' : 'default',\n        onClick: (e) => {\n            var _a;\n            e.stopPropagation();\n            (_a = textInputProps === null || textInputProps === void 0 ? void 0 : textInputProps.onClick) === null || _a === void 0 ? void 0 : _a.call(textInputProps, e);\n        },\n    };\n    if (isSelectEdit) {\n        return (\n        // @ts-ignore\n        jsxRuntime.jsx(core.Select, Object.assign({}, commonProps, { searchable: true, value: value, withinPortal: true }, selectProps, { onBlur: handleBlur, onChange: (value) => {\n                var _a;\n                (_a = selectProps.onChange) === null || _a === void 0 ? void 0 : _a.call(selectProps, value);\n                setValue(value);\n            }, onClick: (e) => {\n                var _a;\n                e.stopPropagation();\n                (_a = selectProps === null || selectProps === void 0 ? void 0 : selectProps.onClick) === null || _a === void 0 ? void 0 : _a.call(selectProps, e);\n            }, ref: (node) => {\n                if (node) {\n                    editInputRefs.current[cell.id] = node;\n                    if (selectProps.ref) {\n                        selectProps.ref.current = node;\n                    }\n                }\n            } })));\n    }\n    return (jsxRuntime.jsx(core.TextInput, Object.assign({}, commonProps, { onKeyDown: handleEnterKeyDown, value: value !== null && value !== void 0 ? value : '' }, textInputProps, { onBlur: handleBlur, onChange: (event) => {\n            var _a;\n            (_a = textInputProps.onChange) === null || _a === void 0 ? void 0 : _a.call(textInputProps, event);\n            setValue(event.target.value);\n        }, onClick: (event) => {\n            var _a;\n            event.stopPropagation();\n            (_a = textInputProps === null || textInputProps === void 0 ? void 0 : textInputProps.onClick) === null || _a === void 0 ? void 0 : _a.call(textInputProps, event);\n        }, ref: (node) => {\n            if (node) {\n                editInputRefs.current[cell.id] = node;\n                if (textInputProps.ref) {\n                    textInputProps.ref.current = node;\n                }\n            }\n        } })));\n};\n\nconst MRT_CopyButton = ({ cell, children, table, }) => {\n    const { options: { localization, mantineCopyButtonProps }, } = table;\n    const { column, row } = cell;\n    const { columnDef } = column;\n    const mTableBodyCellCopyButtonProps = mantineCopyButtonProps instanceof Function\n        ? mantineCopyButtonProps({ cell, column, row, table })\n        : mantineCopyButtonProps;\n    const mcTableBodyCellCopyButtonProps = columnDef.mantineCopyButtonProps instanceof Function\n        ? columnDef.mantineCopyButtonProps({\n            cell,\n            column,\n            row,\n            table,\n        })\n        : columnDef.mantineCopyButtonProps;\n    const buttonProps = Object.assign(Object.assign({}, mTableBodyCellCopyButtonProps), mcTableBodyCellCopyButtonProps);\n    return (jsxRuntime.jsx(core.CopyButton, { value: cell.getValue(), children: ({ copied, copy }) => {\n            var _a;\n            return (jsxRuntime.jsx(core.Tooltip, { color: copied ? 'green' : undefined, withinPortal: true, openDelay: 1000, label: (_a = buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.title) !== null && _a !== void 0 ? _a : (copied ? localization.copiedToClipboard : localization.clickToCopy), children: jsxRuntime.jsx(core.UnstyledButton, Object.assign({}, buttonProps, { onClick: (e) => {\n                        e.stopPropagation();\n                        copy();\n                    }, sx: (theme) => (Object.assign({ backgroundColor: 'transparent', border: 'none', borderRadius: '4px', color: 'inherit', cursor: 'copy', fontFamily: 'inherit', fontSize: 'inherit', fontWeight: 'inherit', justifyContent: 'inherit', letterSpacing: 'inherit', margin: '-4px', minWidth: 'unset', padding: '4px', textAlign: 'inherit', textTransform: 'inherit', '&:active': {\n                            transform: 'translateY(1px)',\n                        }, '&:hover': {\n                            backgroundColor: theme.fn.rgba(getPrimaryColor(theme), 0.1),\n                        } }, ((buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.sx) instanceof Function\n                        ? buttonProps.sx(theme)\n                        : buttonProps === null || buttonProps === void 0 ? void 0 : buttonProps.sx))), title: undefined, children: children })) }));\n        } }));\n};\n\nconst allowedTypes = ['string', 'number'];\nconst allowedFilterVariants = ['text', 'autocomplete'];\nconst MRT_TableBodyCellValue = ({ cell, table, }) => {\n    var _a, _b;\n    const { getState, options: { enableFilterMatchHighlighting, mantineHighlightProps }, } = table;\n    const { column, row } = cell;\n    const { columnDef } = column;\n    const { globalFilter, globalFilterFn } = getState();\n    const filterValue = column.getFilterValue();\n    const highlightProps = (mantineHighlightProps instanceof Function\n        ? mantineHighlightProps({ cell, column, row, table })\n        : mantineHighlightProps);\n    let renderedCellValue = cell.getIsAggregated() && columnDef.AggregatedCell\n        ? columnDef.AggregatedCell({\n            cell,\n            column,\n            row,\n            table,\n        })\n        : row.getIsGrouped() && !cell.getIsGrouped()\n            ? null\n            : cell.getIsGrouped() && columnDef.GroupedCell\n                ? columnDef.GroupedCell({\n                    cell,\n                    column,\n                    row,\n                    table,\n                })\n                : undefined;\n    const isGroupedValue = renderedCellValue !== undefined;\n    if (!isGroupedValue) {\n        renderedCellValue = cell.renderValue();\n    }\n    if (enableFilterMatchHighlighting &&\n        columnDef.enableFilterMatchHighlighting !== false &&\n        renderedCellValue &&\n        allowedTypes.includes(typeof renderedCellValue) &&\n        ((filterValue &&\n            allowedTypes.includes(typeof filterValue) &&\n            allowedFilterVariants.includes(columnDef.filterVariant)) ||\n            (globalFilter &&\n                allowedTypes.includes(typeof globalFilter) &&\n                column.getCanGlobalFilter()))) {\n        let highlight = ((_b = (_a = column.getFilterValue()) !== null && _a !== void 0 ? _a : globalFilter) !== null && _b !== void 0 ? _b : '').toString();\n        if ((filterValue ? columnDef._filterFn : globalFilterFn) === 'fuzzy') {\n            highlight = highlight.split(' ');\n        }\n        renderedCellValue = (jsxRuntime.jsx(core.Highlight, Object.assign({ highlightColor: \"yellow.3\", highlight: highlight }, highlightProps, { children: renderedCellValue === null || renderedCellValue === void 0 ? void 0 : renderedCellValue.toString() })));\n    }\n    if (columnDef.Cell && !isGroupedValue) {\n        renderedCellValue = columnDef.Cell({\n            cell,\n            renderedCellValue,\n            column,\n            row,\n            table,\n        });\n    }\n    return renderedCellValue;\n};\n\nconst MRT_TableBodyCell = ({ cell, isStriped, measureElement, numRows, rowIndex, rowRef, table, virtualCell, }) => {\n    var _a, _b, _c, _d;\n    const theme = core.useMantineTheme();\n    const { getState, options: { createDisplayMode, editDisplayMode, enableClickToCopy, enableColumnOrdering, enableEditing, enableGrouping, enableRowNumbers, layoutMode, mantineTableBodyCellProps, mantineSkeletonProps, rowNumberMode, }, refs: { editInputRefs }, setEditingCell, setHoveredColumn, } = table;\n    const { creatingRow, density, draggingColumn, draggingRow, editingCell, editingRow, hoveredColumn, hoveredRow, isLoading, showSkeletons, } = getState();\n    const { column, row } = cell;\n    const { columnDef } = column;\n    const { columnDefType } = columnDef;\n    const mTableCellBodyProps = mantineTableBodyCellProps instanceof Function\n        ? mantineTableBodyCellProps({ cell, column, row, table })\n        : mantineTableBodyCellProps;\n    const mcTableCellBodyProps = columnDef.mantineTableBodyCellProps instanceof Function\n        ? columnDef.mantineTableBodyCellProps({ cell, column, row, table })\n        : columnDef.mantineTableBodyCellProps;\n    const tableCellProps = Object.assign(Object.assign({}, mTableCellBodyProps), mcTableCellBodyProps);\n    const skeletonProps = mantineSkeletonProps instanceof Function\n        ? mantineSkeletonProps({ cell, column, row, table })\n        : mantineSkeletonProps;\n    const [skeletonWidth, setSkeletonWidth] = react.useState(100);\n    react.useEffect(() => {\n        if ((!isLoading && !showSkeletons) || skeletonWidth !== 100)\n            return;\n        const size = column.getSize();\n        setSkeletonWidth(columnDefType === 'display'\n            ? size / 2\n            : Math.round(Math.random() * (size - size / 3) + size / 3));\n    }, [isLoading, showSkeletons]);\n    const draggingBorders = react.useMemo(() => {\n        const isDraggingColumn = (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id) === column.id;\n        const isHoveredColumn = (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === column.id;\n        const isDraggingRow = (draggingRow === null || draggingRow === void 0 ? void 0 : draggingRow.id) === row.id;\n        const isHoveredRow = (hoveredRow === null || hoveredRow === void 0 ? void 0 : hoveredRow.id) === row.id;\n        const isFirstColumn = getIsFirstColumn(column, table);\n        const isLastColumn = getIsLastColumn(column, table);\n        const isLastRow = rowIndex === numRows && numRows - 1;\n        const borderStyle = isDraggingColumn || isDraggingRow\n            ? `1px dashed ${theme.colors.gray[7]} !important`\n            : isHoveredColumn || isHoveredRow\n                ? `2px dashed ${getPrimaryColor(theme)} !important`\n                : undefined;\n        return borderStyle\n            ? {\n                borderLeft: isDraggingColumn ||\n                    isHoveredColumn ||\n                    ((isDraggingRow || isHoveredRow) && isFirstColumn)\n                    ? borderStyle\n                    : undefined,\n                borderRight: isDraggingColumn ||\n                    isHoveredColumn ||\n                    ((isDraggingRow || isHoveredRow) && isLastColumn)\n                    ? borderStyle\n                    : undefined,\n                borderBottom: isDraggingRow || isHoveredRow || isLastRow\n                    ? borderStyle\n                    : undefined,\n                borderTop: isDraggingRow || isHoveredRow ? borderStyle : undefined,\n            }\n            : undefined;\n    }, [draggingColumn, draggingRow, hoveredColumn, hoveredRow, rowIndex]);\n    const isEditable = (enableEditing instanceof Function ? enableEditing(row) : enableEditing) &&\n        (columnDef.enableEditing instanceof Function\n            ? columnDef.enableEditing(row)\n            : columnDef.enableEditing) !== false;\n    const isEditing = isEditable &&\n        !['modal', 'custom'].includes(editDisplayMode) &&\n        (editDisplayMode === 'table' ||\n            (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) === row.id ||\n            (editingCell === null || editingCell === void 0 ? void 0 : editingCell.id) === cell.id) &&\n        !row.getIsGrouped();\n    const isCreating = isEditable && createDisplayMode === 'row' && (creatingRow === null || creatingRow === void 0 ? void 0 : creatingRow.id) === row.id;\n    const handleDoubleClick = (event) => {\n        var _a;\n        (_a = tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.onDoubleClick) === null || _a === void 0 ? void 0 : _a.call(tableCellProps, event);\n        if (isEditable && editDisplayMode === 'cell') {\n            setEditingCell(cell);\n            setTimeout(() => {\n                var _a;\n                const textField = editInputRefs.current[cell.id];\n                if (textField) {\n                    textField.focus();\n                    (_a = textField.select) === null || _a === void 0 ? void 0 : _a.call(textField);\n                }\n            }, 100);\n        }\n    };\n    const handleDragEnter = (e) => {\n        var _a;\n        (_a = tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.onDragEnter) === null || _a === void 0 ? void 0 : _a.call(tableCellProps, e);\n        if (enableGrouping && (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === 'drop-zone') {\n            setHoveredColumn(null);\n        }\n        if (enableColumnOrdering && draggingColumn) {\n            setHoveredColumn(columnDef.enableColumnOrdering !== false ? column : null);\n        }\n    };\n    return (jsxRuntime.jsxs(core.Box, Object.assign({ component: \"td\", \"data-index\": virtualCell === null || virtualCell === void 0 ? void 0 : virtualCell.index, ref: (node) => {\n            if (node) {\n                measureElement === null || measureElement === void 0 ? void 0 : measureElement(node);\n            }\n        } }, tableCellProps, { onDragEnter: handleDragEnter, onDoubleClick: handleDoubleClick, sx: (theme) => (Object.assign(Object.assign({ alignItems: layoutMode === 'grid' ? 'center' : undefined, cursor: isEditable && editDisplayMode === 'cell' ? 'pointer' : 'inherit', justifyContent: layoutMode === 'grid' ? tableCellProps.align : undefined, overflow: 'hidden', paddingLeft: column.id === 'mrt-row-expand'\n                ? `${row.depth + 1}rem !important`\n                : undefined, textOverflow: columnDefType !== 'display' ? 'ellipsis' : undefined, whiteSpace: density === 'xs' ? 'nowrap' : 'normal', zIndex: (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id) === column.id ? 2 : column.getIsPinned() ? 1 : 0, '&:hover': {\n                outline: isEditing &&\n                    ['table', 'cell'].includes(editDisplayMode !== null && editDisplayMode !== void 0 ? editDisplayMode : '') &&\n                    columnDefType !== 'display'\n                    ? `1px solid ${theme.colors.gray[7]}`\n                    : undefined,\n                outlineOffset: '-1px',\n                textOverflow: 'clip',\n            } }, getCommonCellStyles({\n            column,\n            isStriped,\n            row,\n            table,\n            theme,\n            tableCellProps,\n        })), draggingBorders)), children: [jsxRuntime.jsx(jsxRuntime.Fragment, { children: cell.getIsPlaceholder() ? ((_b = (_a = columnDef.PlaceholderCell) === null || _a === void 0 ? void 0 : _a.call(columnDef, { cell, column, row, table })) !== null && _b !== void 0 ? _b : null) : (isLoading || showSkeletons) &&\n                    [undefined, null].includes(cell.getValue()) ? (jsxRuntime.jsx(core.Skeleton, Object.assign({ height: 20, width: skeletonWidth }, skeletonProps))) : enableRowNumbers &&\n                    rowNumberMode === 'static' &&\n                    column.id === 'mrt-row-numbers' ? (rowIndex + 1) : columnDefType === 'display' &&\n                    (['mrt-row-drag', 'mrt-row-expand', 'mrt-row-select'].includes(column.id) ||\n                        !row.getIsGrouped()) ? ((_c = columnDef.Cell) === null || _c === void 0 ? void 0 : _c.call(columnDef, {\n                    cell,\n                    column,\n                    row,\n                    rowRef,\n                    renderedCellValue: jsxRuntime.jsx(jsxRuntime.Fragment, { children: cell.getValue() }),\n                    table,\n                })) : isCreating || isEditing ? (jsxRuntime.jsx(MRT_EditCellTextInput, { cell: cell, table: table })) : (enableClickToCopy || columnDef.enableClickToCopy) &&\n                    columnDef.enableClickToCopy !== false ? (jsxRuntime.jsx(MRT_CopyButton, { cell: cell, table: table, children: jsxRuntime.jsx(MRT_TableBodyCellValue, { cell: cell, table: table }) })) : (jsxRuntime.jsx(MRT_TableBodyCellValue, { cell: cell, table: table })) }), cell.getIsGrouped() && !columnDef.GroupedCell && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [\" (\", (_d = row.subRows) === null || _d === void 0 ? void 0 : _d.length, \")\"] }))] })));\n};\nconst Memo_MRT_TableBodyCell = react.memo(MRT_TableBodyCell, (prev, next) => next.cell === prev.cell);\n\nconst MRT_TableDetailPanel = ({ parentRowRef, row, rowIndex, table, virtualRow, }) => {\n    const { getVisibleLeafColumns, getState, options: { layoutMode, mantineTableBodyRowProps, mantineDetailPanelProps, renderDetailPanel, }, } = table;\n    const { isLoading } = getState();\n    const tableRowProps = mantineTableBodyRowProps instanceof Function\n        ? mantineTableBodyRowProps({\n            isDetailPanel: true,\n            row,\n            staticRowIndex: rowIndex,\n            table,\n        })\n        : mantineTableBodyRowProps;\n    const tableCellProps = mantineDetailPanelProps instanceof Function\n        ? mantineDetailPanelProps({ row, table })\n        : mantineDetailPanelProps;\n    return (jsxRuntime.jsx(core.Box, Object.assign({ component: \"tr\", className: \"mantine-TableBodyCell-DetailPanel\" }, tableRowProps, { sx: (theme) => {\n            var _a, _b;\n            return (Object.assign({ display: layoutMode === 'grid' ? 'flex' : 'table-row', position: virtualRow ? 'absolute' : undefined, top: virtualRow\n                    ? `${(_b = (_a = parentRowRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) === null || _b === void 0 ? void 0 : _b.height}px`\n                    : undefined, transform: virtualRow\n                    ? `translateY(${virtualRow === null || virtualRow === void 0 ? void 0 : virtualRow.start}px)`\n                    : undefined, width: '100%', zIndex: virtualRow ? 2 : undefined }, ((tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx) instanceof Function\n                ? tableRowProps.sx(theme)\n                : tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx)));\n        }, children: jsxRuntime.jsx(core.Box, Object.assign({ component: \"td\", className: \"mantine-TableBodyCell-DetailPanel\", colSpan: getVisibleLeafColumns().length }, tableCellProps, { sx: (theme) => (Object.assign({ backgroundColor: virtualRow\n                    ? theme.fn.lighten(theme.colors.dark[7], 0.06)\n                    : undefined, borderBottom: !row.getIsExpanded() ? 'none' : undefined, display: layoutMode === 'grid' ? 'flex' : 'table-cell', paddingBottom: row.getIsExpanded()\n                    ? '16px !important'\n                    : '0 !important', paddingTop: row.getIsExpanded() ? '16px !important' : '0 !important', transition: 'all 100ms ease-in-out', width: `${table.getTotalSize()}px` }, ((tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.sx) instanceof Function\n                ? tableCellProps.sx(theme)\n                : tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.sx))), children: renderDetailPanel && (jsxRuntime.jsx(core.Collapse, { in: row.getIsExpanded(), children: !isLoading && renderDetailPanel({ row, table }) })) })) })));\n};\n\nconst MRT_TableBodyRow = ({ columnVirtualizer, enableHover, isStriped, measureElement, numRows, row, rowIndex, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, virtualRow, }) => {\n    const { getState, options: { enableRowOrdering, layoutMode, memoMode, mantineTableBodyRowProps, renderDetailPanel, }, setHoveredRow, } = table;\n    const { draggingColumn, draggingRow, editingCell, editingRow, hoveredRow } = getState();\n    const tableRowProps = mantineTableBodyRowProps instanceof Function\n        ? mantineTableBodyRowProps({ row, staticRowIndex: rowIndex, table })\n        : mantineTableBodyRowProps;\n    const handleDragEnter = (_e) => {\n        if (enableRowOrdering && draggingRow) {\n            setHoveredRow(row);\n        }\n    };\n    const rowRef = react.useRef(null);\n    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsxs(core.Box, Object.assign({ component: \"tr\", \"data-index\": virtualRow === null || virtualRow === void 0 ? void 0 : virtualRow.index, onDragEnter: handleDragEnter, ref: (node) => {\n                    if (node) {\n                        rowRef.current = node;\n                        measureElement === null || measureElement === void 0 ? void 0 : measureElement(node);\n                    }\n                } }, tableRowProps, { sx: (theme) => (Object.assign({ boxSizing: 'border-box', display: layoutMode === 'grid' ? 'flex' : 'table-row', opacity: (draggingRow === null || draggingRow === void 0 ? void 0 : draggingRow.id) === row.id || (hoveredRow === null || hoveredRow === void 0 ? void 0 : hoveredRow.id) === row.id ? 0.5 : 1, position: virtualRow ? 'absolute' : undefined, top: virtualRow ? 0 : undefined, transition: virtualRow ? 'none' : 'all 100ms ease-in-out', width: '100%', '&:hover td': {\n                        backgroundColor: enableHover !== false\n                            ? row.getIsSelected()\n                                ? theme.fn.rgba(getPrimaryColor(theme), 0.2)\n                                : theme.colorScheme === 'dark'\n                                    ? `${theme.fn.lighten(theme.colors.dark[7], 0.12)}`\n                                    : `${theme.fn.darken(theme.white, 0.05)}`\n                            : undefined,\n                    } }, ((tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx) instanceof Function\n                    ? tableRowProps.sx(theme)\n                    : tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx))), style: Object.assign({ transform: virtualRow\n                        ? `translateY(${virtualRow === null || virtualRow === void 0 ? void 0 : virtualRow.start}px)`\n                        : undefined }, tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.style), children: [virtualPaddingLeft ? (jsxRuntime.jsx(\"td\", { style: { display: 'flex', width: virtualPaddingLeft } })) : null, (virtualColumns !== null && virtualColumns !== void 0 ? virtualColumns : row.getVisibleCells()).map((cellOrVirtualCell) => {\n                        var _a, _b;\n                        const cell = columnVirtualizer\n                            ? row.getVisibleCells()[cellOrVirtualCell.index]\n                            : cellOrVirtualCell;\n                        const props = {\n                            cell,\n                            isStriped,\n                            measureElement: columnVirtualizer === null || columnVirtualizer === void 0 ? void 0 : columnVirtualizer.measureElement,\n                            numRows,\n                            rowIndex,\n                            rowRef,\n                            table,\n                            virtualCell: columnVirtualizer\n                                ? cellOrVirtualCell\n                                : undefined,\n                        };\n                        return memoMode === 'cells' &&\n                            cell.column.columnDef.columnDefType === 'data' &&\n                            !draggingColumn &&\n                            !draggingRow &&\n                            (editingCell === null || editingCell === void 0 ? void 0 : editingCell.id) !== cell.id &&\n                            (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) !== row.id ? (jsxRuntime.jsx(Memo_MRT_TableBodyCell, Object.assign({}, props), cell.id + ((_a = cell.getValue()) === null || _a === void 0 ? void 0 : _a.toString()))) : (jsxRuntime.jsx(MRT_TableBodyCell, Object.assign({}, props), cell.id + ((_b = cell.getValue) === null || _b === void 0 ? void 0 : _b.toString())));\n                    }), virtualPaddingRight ? (jsxRuntime.jsx(\"td\", { style: { display: 'flex', width: virtualPaddingRight } })) : null] })), renderDetailPanel && !row.getIsGrouped() && (jsxRuntime.jsx(MRT_TableDetailPanel, { parentRowRef: rowRef, row: row, rowIndex: rowIndex, table: table, virtualRow: virtualRow }))] }));\n};\nconst Memo_MRT_TableBodyRow = react.memo(MRT_TableBodyRow, (prev, next) => prev.row === next.row && prev.rowIndex === next.rowIndex);\n\nconst MRT_TableBody = ({ columnVirtualizer, enableHover, isStriped, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, }) => {\n    var _a, _b, _c;\n    const { getRowModel, getPrePaginationRowModel, getState, options: { createDisplayMode, enableGlobalFilterRankedResults, enablePagination, enableRowVirtualization, layoutMode, localization, mantineTableBodyProps, manualExpanding, manualFiltering, manualGrouping, manualPagination, manualSorting, memoMode, renderEmptyRowsFallback, rowVirtualizerInstanceRef, rowVirtualizerProps, }, refs: { tableContainerRef, tablePaperRef }, } = table;\n    const { creatingRow, columnFilters, density, expanded, globalFilter, pagination, sorting, } = getState();\n    const tableBodyProps = mantineTableBodyProps instanceof Function\n        ? mantineTableBodyProps({ table })\n        : mantineTableBodyProps;\n    const vProps = rowVirtualizerProps instanceof Function\n        ? rowVirtualizerProps({ table })\n        : rowVirtualizerProps;\n    const shouldRankRows = react.useMemo(() => getCanRankRows(table) &&\n        !Object.values(sorting).some(Boolean) &&\n        globalFilter, [\n        enableGlobalFilterRankedResults,\n        expanded,\n        globalFilter,\n        manualExpanding,\n        manualFiltering,\n        manualGrouping,\n        manualSorting,\n        sorting,\n    ]);\n    const rows = react.useMemo(() => {\n        if (!shouldRankRows)\n            return getRowModel().rows;\n        const rankedRows = getPrePaginationRowModel().rows.sort((a, b) => rankGlobalFuzzy(a, b));\n        if (enablePagination && !manualPagination) {\n            const start = pagination.pageIndex * pagination.pageSize;\n            return rankedRows.slice(start, start + pagination.pageSize);\n        }\n        return rankedRows;\n    }, [\n        shouldRankRows,\n        shouldRankRows ? getPrePaginationRowModel().rows : getRowModel().rows,\n        pagination.pageIndex,\n        pagination.pageSize,\n    ]);\n    const rowVirtualizer = enableRowVirtualization\n        ? reactVirtual.useVirtualizer(Object.assign({ count: rows.length, estimateSize: () => density === 'xs' ? 42.7 : density === 'md' ? 54.7 : 70.7, getScrollElement: () => tableContainerRef.current, measureElement: typeof window !== 'undefined' &&\n                navigator.userAgent.indexOf('Firefox') === -1\n                ? (element) => element === null || element === void 0 ? void 0 : element.getBoundingClientRect().height\n                : undefined, overscan: 4 }, vProps))\n        : undefined;\n    if (rowVirtualizerInstanceRef && rowVirtualizer) {\n        rowVirtualizerInstanceRef.current = rowVirtualizer;\n    }\n    const virtualRows = rowVirtualizer\n        ? rowVirtualizer.getVirtualItems()\n        : undefined;\n    return (jsxRuntime.jsxs(core.Box, Object.assign({ component: \"tbody\" }, tableBodyProps, { sx: (theme) => (Object.assign({ display: layoutMode === 'grid' ? 'grid' : 'table-row-group', height: rowVirtualizer\n                ? `${rowVirtualizer.getTotalSize()}px`\n                : 'inherit', minHeight: !rows.length ? '100px' : undefined, position: 'relative' }, ((tableBodyProps === null || tableBodyProps === void 0 ? void 0 : tableBodyProps.sx) instanceof Function\n            ? tableBodyProps === null || tableBodyProps === void 0 ? void 0 : tableBodyProps.sx(theme)\n            : tableBodyProps === null || tableBodyProps === void 0 ? void 0 : tableBodyProps.sx))), children: [creatingRow && createDisplayMode === 'row' && (jsxRuntime.jsx(MRT_TableBodyRow, { table: table, row: creatingRow, rowIndex: -1 })), !rows.length ? (jsxRuntime.jsx(\"tr\", { style: { display: layoutMode === 'grid' ? 'grid' : 'table-row' }, children: jsxRuntime.jsx(\"td\", { colSpan: table.getVisibleLeafColumns().length, style: { display: layoutMode === 'grid' ? 'grid' : 'table-cell' }, children: (_a = renderEmptyRowsFallback === null || renderEmptyRowsFallback === void 0 ? void 0 : renderEmptyRowsFallback({ table })) !== null && _a !== void 0 ? _a : (jsxRuntime.jsx(core.Text, { sx: {\n                            color: 'gray',\n                            fontStyle: 'italic',\n                            maxWidth: `min(100vw, ${(_c = (_b = tablePaperRef.current) === null || _b === void 0 ? void 0 : _b.clientWidth) !== null && _c !== void 0 ? _c : 360}px)`,\n                            paddingTop: '2rem',\n                            paddingBottom: '2rem',\n                            textAlign: 'center',\n                            width: '100%',\n                        }, children: globalFilter || columnFilters.length\n                            ? localization.noResultsFound\n                            : localization.noRecordsToDisplay })) }) })) : (jsxRuntime.jsx(jsxRuntime.Fragment, { children: (virtualRows !== null && virtualRows !== void 0 ? virtualRows : rows).map((rowOrVirtualRow, rowIndex) => {\n                    const row = rowVirtualizer\n                        ? rows[rowOrVirtualRow.index]\n                        : rowOrVirtualRow;\n                    const props = {\n                        columnVirtualizer,\n                        enableHover,\n                        isStriped,\n                        measureElement: rowVirtualizer === null || rowVirtualizer === void 0 ? void 0 : rowVirtualizer.measureElement,\n                        numRows: rows.length,\n                        row,\n                        rowIndex: rowVirtualizer ? rowOrVirtualRow.index : rowIndex,\n                        table,\n                        virtualColumns,\n                        virtualPaddingLeft,\n                        virtualPaddingRight,\n                        virtualRow: rowVirtualizer\n                            ? rowOrVirtualRow\n                            : undefined,\n                    };\n                    return memoMode === 'rows' ? (jsxRuntime.jsx(Memo_MRT_TableBodyRow, Object.assign({}, props), row.id || `mrt-${row.index}`)) : (jsxRuntime.jsx(MRT_TableBodyRow, Object.assign({}, props), row.id || `mrt-${row.index}`));\n                }) }))] })));\n};\nconst Memo_MRT_TableBody = react.memo(MRT_TableBody, (prev, next) => prev.table.options.data === next.table.options.data);\n\nconst MRT_GrabHandleButton = ({ actionIconProps, onDragEnd, onDragStart, table, }) => {\n    var _a;\n    const { options: { icons: { IconGripHorizontal }, localization, }, } = table;\n    return (jsxRuntime.jsx(core.Tooltip, { withinPortal: true, openDelay: 1000, label: (_a = actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.title) !== null && _a !== void 0 ? _a : localization.move, children: jsxRuntime.jsx(core.ActionIcon, Object.assign({ draggable: \"true\", size: \"sm\" }, actionIconProps, { onClick: (e) => {\n                var _a;\n                e.stopPropagation();\n                (_a = actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.onClick) === null || _a === void 0 ? void 0 : _a.call(actionIconProps, e);\n            }, onDragStart: onDragStart, onDragEnd: onDragEnd, sx: (theme) => (Object.assign({ cursor: 'grab', margin: '0 -0.16px', opacity: 0.5, padding: '2px', transition: 'opacity 100ms ease-in-out', '&:hover': {\n                    backgroundColor: 'transparent',\n                    opacity: 1,\n                }, '&:active': {\n                    cursor: 'grabbing',\n                } }, ((actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.sx) instanceof Function\n                ? actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.sx(theme)\n                : actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.sx))), title: undefined, children: jsxRuntime.jsx(IconGripHorizontal, {}) })) }));\n};\n\nconst MRT_TableBodyRowGrabHandle = ({ row, rowRef, table, }) => {\n    const { options: { mantineRowDragHandleProps }, } = table;\n    const actionIconProps = mantineRowDragHandleProps instanceof Function\n        ? mantineRowDragHandleProps({ row, table })\n        : mantineRowDragHandleProps;\n    const handleDragStart = (event) => {\n        var _a;\n        (_a = actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.onDragStart) === null || _a === void 0 ? void 0 : _a.call(actionIconProps, event);\n        event.dataTransfer.setDragImage(rowRef.current, 0, 0);\n        table.setDraggingRow(row);\n    };\n    const handleDragEnd = (event) => {\n        var _a;\n        (_a = actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.onDragEnd) === null || _a === void 0 ? void 0 : _a.call(actionIconProps, event);\n        table.setDraggingRow(null);\n        table.setHoveredRow(null);\n    };\n    return (jsxRuntime.jsx(MRT_GrabHandleButton, { actionIconProps: actionIconProps, onDragStart: handleDragStart, onDragEnd: handleDragEnd, table: table }));\n};\n\nconst MRT_ExpandAllButton = ({ table, }) => {\n    var _a, _b;\n    const { getIsAllRowsExpanded, getIsSomeRowsExpanded, getCanSomeRowsExpand, getState, options: { icons: { IconChevronsDown }, localization, mantineExpandAllButtonProps, renderDetailPanel, }, toggleAllRowsExpanded, } = table;\n    const { density, isLoading } = getState();\n    const actionIconProps = mantineExpandAllButtonProps instanceof Function\n        ? mantineExpandAllButtonProps({ table })\n        : mantineExpandAllButtonProps;\n    const isAllRowsExpanded = getIsAllRowsExpanded();\n    return (jsxRuntime.jsx(core.Tooltip, { withinPortal: true, openDelay: 1000, label: ((_a = actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.title) !== null && _a !== void 0 ? _a : isAllRowsExpanded)\n            ? localization.collapseAll\n            : localization.expandAll, children: jsxRuntime.jsx(core.ActionIcon, Object.assign({ \"aria-label\": localization.expandAll, disabled: isLoading || (!renderDetailPanel && !getCanSomeRowsExpand()), onClick: () => toggleAllRowsExpanded(!isAllRowsExpanded) }, actionIconProps, { sx: (theme) => (Object.assign({ marginLeft: density === 'xl' ? '-6px' : density === 'md' ? '0' : '6px', opacity: 0.8, '&:disabled': {\n                    backgroundColor: 'transparent',\n                    border: 'none',\n                }, '&:hover': {\n                    opacity: 1,\n                } }, ((actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.sx) instanceof Function\n                ? actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.sx(theme)\n                : actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.sx))), title: undefined, children: (_b = actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.children) !== null && _b !== void 0 ? _b : (jsxRuntime.jsx(IconChevronsDown, { style: {\n                    transform: `rotate(${isAllRowsExpanded ? -180 : getIsSomeRowsExpanded() ? -90 : 0}deg)`,\n                    transition: 'transform 100ms',\n                } })) })) }));\n};\n\nconst MRT_ExpandButton = ({ row, table, }) => {\n    var _a, _b;\n    const { options: { icons: { IconChevronDown }, localization, mantineExpandButtonProps, renderDetailPanel, }, } = table;\n    const actionIconProps = mantineExpandButtonProps instanceof Function\n        ? mantineExpandButtonProps({ table, row })\n        : mantineExpandButtonProps;\n    const canExpand = row.getCanExpand();\n    const isExpanded = row.getIsExpanded();\n    const handleToggleExpand = (event) => {\n        var _a;\n        event.stopPropagation();\n        row.toggleExpanded();\n        (_a = actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.onClick) === null || _a === void 0 ? void 0 : _a.call(actionIconProps, event);\n    };\n    return (jsxRuntime.jsx(core.Tooltip, { withinPortal: true, disabled: !canExpand && !renderDetailPanel, openDelay: 1000, label: ((_a = actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.title) !== null && _a !== void 0 ? _a : isExpanded)\n            ? localization.collapse\n            : localization.expand, children: jsxRuntime.jsx(core.ActionIcon, Object.assign({ \"aria-label\": localization.expand, disabled: !canExpand && !renderDetailPanel }, actionIconProps, { onClick: handleToggleExpand, sx: (theme) => (Object.assign({ opacity: 0.8, '&:disabled': {\n                    backgroundColor: 'transparent',\n                    border: 'none',\n                }, '&:hover': {\n                    opacity: 1,\n                } }, ((actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.sx) instanceof Function\n                ? actionIconProps.sx(theme)\n                : actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.sx))), title: undefined, children: (_b = actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.children) !== null && _b !== void 0 ? _b : (jsxRuntime.jsx(IconChevronDown, { style: {\n                    transform: `rotate(${!canExpand && !renderDetailPanel ? -90 : isExpanded ? -180 : 0}deg)`,\n                    transition: 'transform 100ms',\n                } })) })) }));\n};\n\nconst MRT_RowActionMenu = ({ handleEdit, row, table, }) => {\n    const { options: { editDisplayMode, enableEditing, icons: { IconEdit, IconDots }, localization, positionActionsColumn, renderRowActionMenuItems, }, } = table;\n    return (jsxRuntime.jsxs(core.Menu, { position: positionActionsColumn === 'first'\n            ? 'bottom-start'\n            : positionActionsColumn === 'last'\n                ? 'bottom-end'\n                : undefined, closeOnItemClick: true, withinPortal: true, children: [jsxRuntime.jsx(core.Tooltip, { withinPortal: true, openDelay: 1000, label: localization.rowActions, children: jsxRuntime.jsx(core.Menu.Target, { children: jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": localization.rowActions, onClick: (event) => event.stopPropagation(), size: \"sm\", children: jsxRuntime.jsx(IconDots, {}) }) }) }), jsxRuntime.jsxs(core.Menu.Dropdown, { onClick: (event) => event.stopPropagation(), children: [enableEditing && editDisplayMode !== 'table' && (jsxRuntime.jsx(core.Menu.Item, { icon: jsxRuntime.jsx(IconEdit, {}), onClick: handleEdit, children: localization.edit })), renderRowActionMenuItems === null || renderRowActionMenuItems === void 0 ? void 0 : renderRowActionMenuItems({\n                        row,\n                        table,\n                    })] })] }));\n};\n\nconst MRT_EditActionButtons = ({ row, table, variant = 'icon', }) => {\n    const { getState, options: { icons: { IconCircleX, IconDeviceFloppy }, localization, onCreatingRowCancel, onCreatingRowSave, onEditingRowSave, onEditingRowCancel, }, refs: { editInputRefs }, setCreatingRow, setEditingRow, } = table;\n    const { creatingRow, editingRow, isSaving } = getState();\n    const isCreating = (creatingRow === null || creatingRow === void 0 ? void 0 : creatingRow.id) === row.id;\n    const isEditing = (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) === row.id;\n    const handleCancel = () => {\n        if (isCreating) {\n            onCreatingRowCancel === null || onCreatingRowCancel === void 0 ? void 0 : onCreatingRowCancel({ row, table });\n            setCreatingRow(null);\n        }\n        else if (isEditing) {\n            onEditingRowCancel === null || onEditingRowCancel === void 0 ? void 0 : onEditingRowCancel({ row, table });\n            setEditingRow(null);\n        }\n        row._valuesCache = {}; //reset values cache\n    };\n    const handleSubmitRow = () => {\n        var _a;\n        //look for auto-filled input values\n        (_a = Object.values(editInputRefs === null || editInputRefs === void 0 ? void 0 : editInputRefs.current)\n            .filter((inputRef) => { var _a, _b; return row.id === ((_b = (_a = inputRef === null || inputRef === void 0 ? void 0 : inputRef.name) === null || _a === void 0 ? void 0 : _a.split('_')) === null || _b === void 0 ? void 0 : _b[0]); })) === null || _a === void 0 ? void 0 : _a.forEach((input) => {\n            if (input.value !== undefined &&\n                Object.hasOwn(row === null || row === void 0 ? void 0 : row._valuesCache, input.name)) {\n                // @ts-ignore\n                row._valuesCache[input.name] = input.value;\n            }\n        });\n        if (isCreating)\n            onCreatingRowSave === null || onCreatingRowSave === void 0 ? void 0 : onCreatingRowSave({\n                exitCreatingMode: () => setCreatingRow(null),\n                row,\n                table,\n                values: row._valuesCache,\n            });\n        else if (isEditing) {\n            onEditingRowSave === null || onEditingRowSave === void 0 ? void 0 : onEditingRowSave({\n                exitEditingMode: () => setEditingRow(null),\n                row,\n                table,\n                values: row === null || row === void 0 ? void 0 : row._valuesCache,\n            });\n        }\n    };\n    return (jsxRuntime.jsx(core.Box, { onClick: (e) => e.stopPropagation(), sx: { display: 'flex', gap: '12px' }, children: variant === 'icon' ? (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(core.Tooltip, { withinPortal: true, label: localization.cancel, children: jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": localization.cancel, onClick: handleCancel, children: jsxRuntime.jsx(IconCircleX, {}) }) }), jsxRuntime.jsx(core.Tooltip, { withinPortal: true, label: localization.save, children: jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": localization.save, color: \"blue\", onClick: handleSubmitRow, loading: isSaving, children: jsxRuntime.jsx(IconDeviceFloppy, {}) }) })] })) : (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(core.Button, { onClick: handleCancel, variant: \"subtle\", children: localization.cancel }), jsxRuntime.jsx(core.Button, { onClick: handleSubmitRow, variant: \"filled\", loading: isSaving, children: localization.save })] })) }));\n};\n\nconst MRT_ToggleRowActionMenuButton = ({ cell, row, table, }) => {\n    const { getState, options: { createDisplayMode, editDisplayMode, enableEditing, icons: { IconEdit }, localization, renderRowActionMenuItems, renderRowActions, }, setEditingRow, } = table;\n    const { creatingRow, editingRow } = getState();\n    const isCreating = (creatingRow === null || creatingRow === void 0 ? void 0 : creatingRow.id) === row.id;\n    const isEditing = (editingRow === null || editingRow === void 0 ? void 0 : editingRow.id) === row.id;\n    const handleStartEditMode = (event) => {\n        event.stopPropagation();\n        setEditingRow(Object.assign({}, row));\n    };\n    const showEditActionButtons = (isCreating && createDisplayMode === 'row') ||\n        (isEditing && editDisplayMode === 'row');\n    return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: renderRowActions && !showEditActionButtons ? (renderRowActions({ cell, row, table })) : showEditActionButtons ? (jsxRuntime.jsx(MRT_EditActionButtons, { row: row, table: table })) : !renderRowActionMenuItems &&\n            (enableEditing instanceof Function\n                ? enableEditing(row)\n                : enableEditing) ? (jsxRuntime.jsx(core.Tooltip, { withinPortal: true, position: \"right\", label: localization.edit, children: jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": localization.edit, disabled: !!editingRow && editingRow.id !== row.id, onClick: handleStartEditMode, sx: {\n                    opacity: 0.8,\n                    '&:hover': {\n                        opacity: 1,\n                    },\n                    '&:disabled': {\n                        backgroundColor: 'transparent',\n                        border: 'none',\n                    },\n                }, children: jsxRuntime.jsx(IconEdit, {}) }) })) : renderRowActionMenuItems ? (jsxRuntime.jsx(MRT_RowActionMenu, { handleEdit: handleStartEditMode, row: row, table: table })) : null }));\n};\n\nconst MRT_SelectCheckbox = ({ row, selectAll, table, }) => {\n    var _a;\n    const { getState, options: { enableMultiRowSelection, localization, mantineSelectAllCheckboxProps, mantineSelectCheckboxProps, selectAllMode, selectDisplayMode, }, } = table;\n    const { density, isLoading } = getState();\n    const checkboxProps = !row\n        ? mantineSelectAllCheckboxProps instanceof Function\n            ? mantineSelectAllCheckboxProps({ table })\n            : mantineSelectAllCheckboxProps\n        : mantineSelectCheckboxProps instanceof Function\n            ? mantineSelectCheckboxProps({ row, table })\n            : mantineSelectCheckboxProps;\n    const allRowsSelected = selectAll\n        ? selectAllMode === 'page'\n            ? table.getIsAllPageRowsSelected()\n            : table.getIsAllRowsSelected()\n        : undefined;\n    const commonProps = Object.assign(Object.assign({ 'aria-label': selectAll\n            ? localization.toggleSelectAll\n            : localization.toggleSelectRow, checked: selectAll ? allRowsSelected : row === null || row === void 0 ? void 0 : row.getIsSelected(), disabled: isLoading || (row && !row.getCanSelect()), onChange: row\n            ? row.getToggleSelectedHandler()\n            : selectAllMode === 'all'\n                ? table.getToggleAllRowsSelectedHandler()\n                : table.getToggleAllPageRowsSelectedHandler(), size: density === 'xs' ? 'sm' : 'md' }, checkboxProps), { onClick: (e) => {\n            var _a;\n            e.stopPropagation();\n            (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n        }, title: undefined });\n    return (jsxRuntime.jsx(core.Tooltip, { withinPortal: true, openDelay: 1000, label: (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.title) !== null && _a !== void 0 ? _a : (selectAll\n            ? localization.toggleSelectAll\n            : localization.toggleSelectRow), children: jsxRuntime.jsx(\"span\", { children: selectDisplayMode === 'switch' ? (jsxRuntime.jsx(core.Switch, Object.assign({}, commonProps))) : selectDisplayMode === 'radio' ||\n                enableMultiRowSelection === false ? (jsxRuntime.jsx(core.Radio, Object.assign({}, commonProps))) : (jsxRuntime.jsx(core.Checkbox, Object.assign({ indeterminate: selectAll\n                    ? table.getIsSomeRowsSelected() && !allRowsSelected\n                    : row === null || row === void 0 ? void 0 : row.getIsSomeSelected() }, commonProps))) }) }));\n};\n\nconst useMRT_DisplayColumns = ({ creatingRow, columnOrder, grouping, tableOptions, }) => {\n    var _a, _b;\n    return react.useMemo(() => {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n        return [\n            ((_b = (_a = tableOptions.state) === null || _a === void 0 ? void 0 : _a.columnOrder) !== null && _b !== void 0 ? _b : columnOrder).includes('mrt-row-drag') && Object.assign(Object.assign(Object.assign({ Cell: ({ row, rowRef, table }) => (jsxRuntime.jsx(MRT_TableBodyRowGrabHandle, { row: row, rowRef: rowRef, table: table })), header: tableOptions.localization.move, size: 60 }, tableOptions.defaultDisplayColumn), (_c = tableOptions.displayColumnDefOptions) === null || _c === void 0 ? void 0 : _c['mrt-row-drag']), { id: 'mrt-row-drag' }),\n            (((_e = (_d = tableOptions.state) === null || _d === void 0 ? void 0 : _d.columnOrder) !== null && _e !== void 0 ? _e : columnOrder).includes('mrt-row-actions') ||\n                (creatingRow && tableOptions.createDisplayMode === 'row')) && Object.assign(Object.assign(Object.assign({ Cell: ({ cell, row, table }) => (jsxRuntime.jsx(MRT_ToggleRowActionMenuButton, { cell: cell, row: row, table: table })), header: tableOptions.localization.actions, size: 70 }, tableOptions.defaultDisplayColumn), (_f = tableOptions.displayColumnDefOptions) === null || _f === void 0 ? void 0 : _f['mrt-row-actions']), { id: 'mrt-row-actions' }),\n            ((_h = (_g = tableOptions.state) === null || _g === void 0 ? void 0 : _g.columnOrder) !== null && _h !== void 0 ? _h : columnOrder).includes('mrt-row-expand') &&\n                showExpandColumn(tableOptions, (_k = (_j = tableOptions.state) === null || _j === void 0 ? void 0 : _j.grouping) !== null && _k !== void 0 ? _k : grouping) && Object.assign(Object.assign(Object.assign({ Cell: ({ row, table }) => (jsxRuntime.jsx(MRT_ExpandButton, { row: row, table: table })), Header: tableOptions.enableExpandAll\n                    ? ({ table }) => jsxRuntime.jsx(MRT_ExpandAllButton, { table: table })\n                    : null, header: tableOptions.localization.expand, size: 60 }, tableOptions.defaultDisplayColumn), (_l = tableOptions.displayColumnDefOptions) === null || _l === void 0 ? void 0 : _l['mrt-row-expand']), { id: 'mrt-row-expand' }),\n            ((_o = (_m = tableOptions.state) === null || _m === void 0 ? void 0 : _m.columnOrder) !== null && _o !== void 0 ? _o : columnOrder).includes('mrt-row-select') && Object.assign(Object.assign(Object.assign({ Cell: ({ row, table }) => (jsxRuntime.jsx(MRT_SelectCheckbox, { row: row, table: table })), Header: tableOptions.enableSelectAll &&\n                    tableOptions.enableMultiRowSelection\n                    ? ({ table }) => jsxRuntime.jsx(MRT_SelectCheckbox, { selectAll: true, table: table })\n                    : null, header: tableOptions.localization.select, size: 60 }, tableOptions.defaultDisplayColumn), (_p = tableOptions.displayColumnDefOptions) === null || _p === void 0 ? void 0 : _p['mrt-row-select']), { id: 'mrt-row-select' }),\n            ((_r = (_q = tableOptions.state) === null || _q === void 0 ? void 0 : _q.columnOrder) !== null && _r !== void 0 ? _r : columnOrder).includes('mrt-row-numbers') && Object.assign(Object.assign(Object.assign({ Cell: ({ row }) => row.index + 1, Header: () => tableOptions.localization.rowNumber, header: tableOptions.localization.rowNumbers, size: 60 }, tableOptions.defaultDisplayColumn), (_s = tableOptions.displayColumnDefOptions) === null || _s === void 0 ? void 0 : _s['mrt-row-numbers']), { id: 'mrt-row-numbers' }),\n        ].filter(Boolean);\n    }, [\n        columnOrder,\n        grouping,\n        tableOptions.displayColumnDefOptions,\n        tableOptions.editDisplayMode,\n        tableOptions.enableColumnDragging,\n        tableOptions.enableColumnFilterModes,\n        tableOptions.enableColumnOrdering,\n        tableOptions.enableEditing,\n        tableOptions.enableExpandAll,\n        tableOptions.enableExpanding,\n        tableOptions.enableGrouping,\n        tableOptions.enableRowActions,\n        tableOptions.enableRowDragging,\n        tableOptions.enableRowNumbers,\n        tableOptions.enableRowOrdering,\n        tableOptions.enableRowSelection,\n        tableOptions.enableSelectAll,\n        tableOptions.localization,\n        tableOptions.positionActionsColumn,\n        tableOptions.renderDetailPanel,\n        tableOptions.renderRowActionMenuItems,\n        tableOptions.renderRowActions,\n        (_a = tableOptions.state) === null || _a === void 0 ? void 0 : _a.columnOrder,\n        (_b = tableOptions.state) === null || _b === void 0 ? void 0 : _b.grouping,\n    ]);\n};\n\nconst useMRT_Effects = (table) => {\n    const { getState, options: { enablePagination, rowCount }, } = table;\n    const { globalFilter, isFullScreen, pagination, sorting, isLoading, showSkeletons, } = getState();\n    const isMounted = react.useRef(false);\n    const initialBodyHeight = react.useRef();\n    const previousTop = react.useRef();\n    react.useEffect(() => {\n        if (typeof window !== 'undefined') {\n            initialBodyHeight.current = document.body.style.height;\n        }\n    }, []);\n    react.useEffect(() => {\n        if (isMounted && typeof window !== 'undefined') {\n            if (isFullScreen) {\n                previousTop.current = document.body.getBoundingClientRect().top; //save scroll position\n                document.body.style.height = '100vh'; //hide page scrollbars when table is in full screen mode\n            }\n            else {\n                document.body.style.height = initialBodyHeight.current;\n                if (!previousTop.current)\n                    return;\n                //restore scroll position\n                window.scrollTo({\n                    top: -1 * previousTop.current,\n                    behavior: 'instant',\n                });\n            }\n        }\n        isMounted.current = true;\n    }, [isFullScreen]);\n    //if page index is out of bounds, set it to the last page\n    react.useEffect(() => {\n        if (!enablePagination || isLoading || showSkeletons)\n            return;\n        const { pageIndex, pageSize } = pagination;\n        const totalRowCount = rowCount !== null && rowCount !== void 0 ? rowCount : table.getPrePaginationRowModel().rows.length;\n        const firstVisibleRowIndex = pageIndex * pageSize;\n        if (firstVisibleRowIndex > totalRowCount) {\n            table.setPageIndex(Math.floor(totalRowCount / pageSize));\n        }\n    }, [rowCount, table.getPrePaginationRowModel().rows.length]);\n    //turn off sort when global filter is looking for ranked results\n    const appliedSort = react.useRef(sorting);\n    react.useEffect(() => {\n        if (sorting.length) {\n            appliedSort.current = sorting;\n        }\n    }, [sorting]);\n    react.useEffect(() => {\n        if (!getCanRankRows(table))\n            return;\n        if (globalFilter) {\n            table.setSorting([]);\n        }\n        else {\n            table.setSorting(() => appliedSort.current || []);\n        }\n    }, [globalFilter]);\n};\n\nconst useMRT_TableInstance = (tableOptions) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10;\n    const bottomToolbarRef = react.useRef(null);\n    const editInputRefs = react.useRef({});\n    const filterInputRefs = react.useRef({});\n    const searchInputRef = react.useRef(null);\n    const tableContainerRef = react.useRef(null);\n    const tableHeadCellRefs = react.useRef({});\n    const tablePaperRef = react.useRef(null);\n    const topToolbarRef = react.useRef(null);\n    const initialState = react.useMemo(() => {\n        var _a, _b, _c;\n        const initState = (_a = tableOptions.initialState) !== null && _a !== void 0 ? _a : {};\n        initState.columnOrder =\n            (_b = initState.columnOrder) !== null && _b !== void 0 ? _b : getDefaultColumnOrderIds(tableOptions);\n        initState.globalFilterFn = (_c = tableOptions.globalFilterFn) !== null && _c !== void 0 ? _c : 'fuzzy';\n        return initState;\n    }, []);\n    const [creatingRow, _setCreatingRow] = react.useState((_a = initialState.creatingRow) !== null && _a !== void 0 ? _a : null);\n    const [columnFilterFns, setColumnFilterFns] = react.useState(() => Object.assign({}, ...getAllLeafColumnDefs(tableOptions.columns).map((col) => {\n        var _a, _b, _c, _d;\n        return ({\n            [getColumnId(col)]: col.filterFn instanceof Function\n                ? (_a = col.filterFn.name) !== null && _a !== void 0 ? _a : 'custom'\n                : (_d = (_b = col.filterFn) !== null && _b !== void 0 ? _b : (_c = initialState === null || initialState === void 0 ? void 0 : initialState.columnFilterFns) === null || _c === void 0 ? void 0 : _c[getColumnId(col)]) !== null && _d !== void 0 ? _d : getDefaultColumnFilterFn(col),\n        });\n    })));\n    const [columnOrder, setColumnOrder] = react.useState((_b = initialState.columnOrder) !== null && _b !== void 0 ? _b : []);\n    const [density, setDensity] = react.useState((_c = initialState === null || initialState === void 0 ? void 0 : initialState.density) !== null && _c !== void 0 ? _c : 'md');\n    const [draggingColumn, setDraggingColumn] = react.useState((_d = initialState.draggingColumn) !== null && _d !== void 0 ? _d : null);\n    const [draggingRow, setDraggingRow] = react.useState((_e = initialState.draggingRow) !== null && _e !== void 0 ? _e : null);\n    const [editingCell, setEditingCell] = react.useState((_f = initialState.editingCell) !== null && _f !== void 0 ? _f : null);\n    const [editingRow, setEditingRow] = react.useState((_g = initialState.editingRow) !== null && _g !== void 0 ? _g : null);\n    const [globalFilterFn, setGlobalFilterFn] = react.useState((_h = initialState.globalFilterFn) !== null && _h !== void 0 ? _h : 'fuzzy');\n    const [grouping, setGrouping] = react.useState((_j = initialState.grouping) !== null && _j !== void 0 ? _j : []);\n    const [hoveredColumn, setHoveredColumn] = react.useState((_k = initialState.hoveredColumn) !== null && _k !== void 0 ? _k : null);\n    const [hoveredRow, setHoveredRow] = react.useState((_l = initialState.hoveredRow) !== null && _l !== void 0 ? _l : null);\n    const [isFullScreen, setIsFullScreen] = react.useState((_m = initialState === null || initialState === void 0 ? void 0 : initialState.isFullScreen) !== null && _m !== void 0 ? _m : false);\n    const [showAlertBanner, setShowAlertBanner] = react.useState((_p = (_o = tableOptions.initialState) === null || _o === void 0 ? void 0 : _o.showAlertBanner) !== null && _p !== void 0 ? _p : false);\n    const [showColumnFilters, setShowColumnFilters] = react.useState((_q = initialState === null || initialState === void 0 ? void 0 : initialState.showColumnFilters) !== null && _q !== void 0 ? _q : false);\n    const [showGlobalFilter, setShowGlobalFilter] = react.useState((_r = initialState === null || initialState === void 0 ? void 0 : initialState.showGlobalFilter) !== null && _r !== void 0 ? _r : false);\n    const [showToolbarDropZone, setShowToolbarDropZone] = react.useState((_s = initialState === null || initialState === void 0 ? void 0 : initialState.showToolbarDropZone) !== null && _s !== void 0 ? _s : false);\n    const displayColumns = useMRT_DisplayColumns({\n        columnOrder,\n        creatingRow,\n        grouping,\n        tableOptions,\n    });\n    const columnDefs = react.useMemo(() => {\n        var _a, _b, _c;\n        return prepareColumns({\n            aggregationFns: tableOptions.aggregationFns,\n            columnDefs: [...displayColumns, ...tableOptions.columns],\n            columnFilterFns: (_b = (_a = tableOptions.state) === null || _a === void 0 ? void 0 : _a.columnFilterFns) !== null && _b !== void 0 ? _b : columnFilterFns,\n            defaultDisplayColumn: (_c = tableOptions.defaultDisplayColumn) !== null && _c !== void 0 ? _c : {},\n            filterFns: tableOptions.filterFns,\n            sortingFns: tableOptions.sortingFns,\n        });\n    }, [\n        columnFilterFns,\n        displayColumns,\n        tableOptions.columns,\n        (_t = tableOptions.state) === null || _t === void 0 ? void 0 : _t.columnFilterFns,\n    ]);\n    const data = react.useMemo(() => {\n        var _a, _b, _c, _d, _e;\n        return (((_a = tableOptions.state) === null || _a === void 0 ? void 0 : _a.isLoading) || ((_b = tableOptions.state) === null || _b === void 0 ? void 0 : _b.showSkeletons)) &&\n            !tableOptions.data.length\n            ? [\n                ...Array(((_d = (_c = tableOptions.state) === null || _c === void 0 ? void 0 : _c.pagination) === null || _d === void 0 ? void 0 : _d.pageSize) ||\n                    ((_e = initialState === null || initialState === void 0 ? void 0 : initialState.pagination) === null || _e === void 0 ? void 0 : _e.pageSize) ||\n                    10).fill(null),\n            ].map(() => Object.assign({}, ...getAllLeafColumnDefs(tableOptions.columns).map((col) => ({\n                [getColumnId(col)]: null,\n            }))))\n            : tableOptions.data;\n    }, [\n        tableOptions.data,\n        (_u = tableOptions.state) === null || _u === void 0 ? void 0 : _u.isLoading,\n        (_v = tableOptions.state) === null || _v === void 0 ? void 0 : _v.showSkeletons,\n    ]);\n    //@ts-ignore\n    const table = reactTable.useReactTable(Object.assign(Object.assign({ getCoreRowModel: reactTable.getCoreRowModel(), getExpandedRowModel: tableOptions.enableExpanding || tableOptions.enableGrouping\n            ? reactTable.getExpandedRowModel()\n            : undefined, getFacetedMinMaxValues: tableOptions.enableFacetedValues\n            ? reactTable.getFacetedMinMaxValues()\n            : undefined, getFacetedRowModel: tableOptions.enableFacetedValues\n            ? reactTable.getFacetedRowModel()\n            : undefined, getFacetedUniqueValues: tableOptions.enableFacetedValues\n            ? reactTable.getFacetedUniqueValues()\n            : undefined, getFilteredRowModel: tableOptions.enableColumnFilters ||\n            tableOptions.enableGlobalFilter ||\n            tableOptions.enableFilters\n            ? reactTable.getFilteredRowModel()\n            : undefined, getGroupedRowModel: tableOptions.enableGrouping\n            ? reactTable.getGroupedRowModel()\n            : undefined, getPaginationRowModel: tableOptions.enablePagination\n            ? reactTable.getPaginationRowModel()\n            : undefined, getSortedRowModel: tableOptions.enableSorting\n            ? reactTable.getSortedRowModel()\n            : undefined, onColumnOrderChange: setColumnOrder, onGroupingChange: setGrouping, getSubRows: (row) => row === null || row === void 0 ? void 0 : row.subRows }, tableOptions), { \n        //@ts-ignore\n        columns: columnDefs, data, globalFilterFn: (_w = tableOptions.filterFns) === null || _w === void 0 ? void 0 : _w[globalFilterFn !== null && globalFilterFn !== void 0 ? globalFilterFn : 'fuzzy'], initialState, state: Object.assign({ creatingRow,\n            columnFilterFns,\n            columnOrder,\n            density,\n            draggingColumn,\n            draggingRow,\n            editingCell,\n            editingRow,\n            globalFilterFn,\n            grouping,\n            hoveredColumn,\n            hoveredRow,\n            isFullScreen,\n            showAlertBanner,\n            showColumnFilters,\n            showGlobalFilter,\n            showToolbarDropZone }, tableOptions.state) }));\n    // @ts-ignore\n    table.refs = {\n        // @ts-ignore\n        bottomToolbarRef,\n        editInputRefs,\n        filterInputRefs,\n        // @ts-ignore\n        searchInputRef,\n        // @ts-ignore\n        tableContainerRef,\n        tableHeadCellRefs,\n        // @ts-ignore\n        tablePaperRef,\n        // @ts-ignore\n        topToolbarRef,\n    };\n    const setCreatingRow = (row) => {\n        var _a, _b;\n        let _row = row;\n        if (row === true) {\n            _row = createRow(table);\n        }\n        (_b = (_a = tableOptions === null || tableOptions === void 0 ? void 0 : tableOptions.onCreatingRowChange) === null || _a === void 0 ? void 0 : _a.call(tableOptions, _row)) !== null && _b !== void 0 ? _b : _setCreatingRow(_row);\n    };\n    table.setCreatingRow = setCreatingRow;\n    table.setColumnFilterFns =\n        (_x = tableOptions.onColumnFilterFnsChange) !== null && _x !== void 0 ? _x : setColumnFilterFns;\n    table.setDensity = (_y = tableOptions.onDensityChange) !== null && _y !== void 0 ? _y : setDensity;\n    table.setDraggingColumn =\n        (_z = tableOptions.onDraggingColumnChange) !== null && _z !== void 0 ? _z : setDraggingColumn;\n    table.setDraggingRow = (_0 = tableOptions.onDraggingRowChange) !== null && _0 !== void 0 ? _0 : setDraggingRow;\n    table.setEditingCell = (_1 = tableOptions.onEditingCellChange) !== null && _1 !== void 0 ? _1 : setEditingCell;\n    table.setEditingRow = (_2 = tableOptions.onEditingRowChange) !== null && _2 !== void 0 ? _2 : setEditingRow;\n    table.setGlobalFilterFn =\n        (_3 = tableOptions.onGlobalFilterFnChange) !== null && _3 !== void 0 ? _3 : setGlobalFilterFn;\n    table.setHoveredColumn =\n        (_4 = tableOptions.onHoveredColumnChange) !== null && _4 !== void 0 ? _4 : setHoveredColumn;\n    table.setHoveredRow = (_5 = tableOptions.onHoveredRowChange) !== null && _5 !== void 0 ? _5 : setHoveredRow;\n    table.setIsFullScreen = (_6 = tableOptions.onIsFullScreenChange) !== null && _6 !== void 0 ? _6 : setIsFullScreen;\n    table.setShowAlertBanner =\n        (_7 = tableOptions.onShowAlertBannerChange) !== null && _7 !== void 0 ? _7 : setShowAlertBanner;\n    table.setShowColumnFilters =\n        (_8 = tableOptions.onShowColumnFiltersChange) !== null && _8 !== void 0 ? _8 : setShowColumnFilters;\n    table.setShowGlobalFilter =\n        (_9 = tableOptions.onShowGlobalFilterChange) !== null && _9 !== void 0 ? _9 : setShowGlobalFilter;\n    table.setShowToolbarDropZone =\n        (_10 = tableOptions.onShowToolbarDropZoneChange) !== null && _10 !== void 0 ? _10 : setShowToolbarDropZone;\n    useMRT_Effects(table);\n    return table;\n};\n\nconst useMantineReactTable = (tableOptions) => {\n    const parsedTableOptions = useMRT_TableOptions(tableOptions);\n    const tableInstance = useMRT_TableInstance(parsedTableOptions);\n    return tableInstance;\n};\n\nconst mrtFilterOptions = (localization) => [\n    {\n        option: 'fuzzy',\n        symbol: '≈',\n        label: localization.filterFuzzy,\n        divider: false,\n    },\n    {\n        option: 'contains',\n        symbol: '*',\n        label: localization.filterContains,\n        divider: false,\n    },\n    {\n        option: 'startsWith',\n        symbol: 'a',\n        label: localization.filterStartsWith,\n        divider: false,\n    },\n    {\n        option: 'endsWith',\n        symbol: 'z',\n        label: localization.filterEndsWith,\n        divider: true,\n    },\n    {\n        option: 'equals',\n        symbol: '=',\n        label: localization.filterEquals,\n        divider: false,\n    },\n    {\n        option: 'notEquals',\n        symbol: '≠',\n        label: localization.filterNotEquals,\n        divider: true,\n    },\n    {\n        option: 'between',\n        symbol: '⇿',\n        label: localization.filterBetween,\n        divider: false,\n    },\n    {\n        option: 'betweenInclusive',\n        symbol: '⬌',\n        label: localization.filterBetweenInclusive,\n        divider: true,\n    },\n    {\n        option: 'greaterThan',\n        symbol: '>',\n        label: localization.filterGreaterThan,\n        divider: false,\n    },\n    {\n        option: 'greaterThanOrEqualTo',\n        symbol: '≥',\n        label: localization.filterGreaterThanOrEqualTo,\n        divider: false,\n    },\n    {\n        option: 'lessThan',\n        symbol: '<',\n        label: localization.filterLessThan,\n        divider: false,\n    },\n    {\n        option: 'lessThanOrEqualTo',\n        symbol: '≤',\n        label: localization.filterLessThanOrEqualTo,\n        divider: true,\n    },\n    {\n        option: 'empty',\n        symbol: '∅',\n        label: localization.filterEmpty,\n        divider: false,\n    },\n    {\n        option: 'notEmpty',\n        symbol: '!∅',\n        label: localization.filterNotEmpty,\n        divider: false,\n    },\n];\nconst rangeModes = ['between', 'betweenInclusive', 'inNumberRange'];\nconst emptyModes = ['empty', 'notEmpty'];\nconst arrModes = ['arrIncludesSome', 'arrIncludesAll', 'arrIncludes'];\nconst rangeVariants = ['range-slider', 'date-range', 'range'];\nconst MRT_FilterOptionMenu = ({ header, onSelect, table, }) => {\n    var _a, _b, _c, _d;\n    const { getState, options: { columnFilterModeOptions, globalFilterModeOptions, localization, renderColumnFilterModeMenuItems, renderGlobalFilterModeMenuItems, }, setColumnFilterFns, setGlobalFilterFn, } = table;\n    const { globalFilterFn } = getState();\n    const { column } = header !== null && header !== void 0 ? header : {};\n    const { columnDef } = column !== null && column !== void 0 ? column : {};\n    const currentFilterValue = column === null || column === void 0 ? void 0 : column.getFilterValue();\n    let allowedColumnFilterOptions = (_a = columnDef === null || columnDef === void 0 ? void 0 : columnDef.columnFilterModeOptions) !== null && _a !== void 0 ? _a : columnFilterModeOptions;\n    if (rangeVariants.includes(columnDef === null || columnDef === void 0 ? void 0 : columnDef.filterVariant)) {\n        allowedColumnFilterOptions = [\n            ...rangeModes,\n            ...(allowedColumnFilterOptions !== null && allowedColumnFilterOptions !== void 0 ? allowedColumnFilterOptions : []),\n        ].filter((option) => rangeModes.includes(option));\n    }\n    const internalFilterOptions = react.useMemo(() => mrtFilterOptions(localization).filter((filterOption) => columnDef\n        ? allowedColumnFilterOptions === undefined ||\n            (allowedColumnFilterOptions === null || allowedColumnFilterOptions === void 0 ? void 0 : allowedColumnFilterOptions.includes(filterOption.option))\n        : (!globalFilterModeOptions ||\n            globalFilterModeOptions.includes(filterOption.option)) &&\n            ['fuzzy', 'contains', 'startsWith'].includes(filterOption.option)), []);\n    const handleSelectFilterMode = (option) => {\n        var _a;\n        const prevFilterMode = (_a = columnDef === null || columnDef === void 0 ? void 0 : columnDef._filterFn) !== null && _a !== void 0 ? _a : '';\n        if (!header || !column) {\n            // global filter mode\n            setGlobalFilterFn(option);\n        }\n        else if (option !== prevFilterMode) {\n            // column filter mode\n            setColumnFilterFns((prev) => (Object.assign(Object.assign({}, prev), { [header.id]: option })));\n            // reset filter value and/or perform new filter render\n            if (emptyModes.includes(option)) {\n                // will now be empty/notEmpty filter mode\n                if (currentFilterValue !== ' ' &&\n                    !emptyModes.includes(prevFilterMode)) {\n                    column.setFilterValue(' ');\n                }\n                else if (currentFilterValue) {\n                    column.setFilterValue(currentFilterValue); // perform new filter render\n                }\n            }\n            else if ((columnDef === null || columnDef === void 0 ? void 0 : columnDef.filterVariant) === 'multi-select' ||\n                arrModes.includes(option)) {\n                // will now be array filter mode\n                if (currentFilterValue instanceof String ||\n                    (currentFilterValue === null || currentFilterValue === void 0 ? void 0 : currentFilterValue.length)) {\n                    column.setFilterValue([]);\n                }\n                else if (currentFilterValue) {\n                    column.setFilterValue(currentFilterValue); // perform new filter render\n                }\n            }\n            else if (rangeVariants.includes(columnDef === null || columnDef === void 0 ? void 0 : columnDef.filterVariant) ||\n                rangeModes.includes(option)) {\n                // will now be range filter mode\n                if (!Array.isArray(currentFilterValue) ||\n                    (!(currentFilterValue === null || currentFilterValue === void 0 ? void 0 : currentFilterValue.every((v) => v === '')) &&\n                        !rangeModes.includes(prevFilterMode))) {\n                    column.setFilterValue(['', '']);\n                }\n                else {\n                    column.setFilterValue(currentFilterValue); // perform new filter render\n                }\n            }\n            else {\n                // will now be single value filter mode\n                if (Array.isArray(currentFilterValue)) {\n                    column.setFilterValue('');\n                }\n                else {\n                    column.setFilterValue(currentFilterValue); // perform new filter render\n                }\n            }\n        }\n        onSelect === null || onSelect === void 0 ? void 0 : onSelect();\n    };\n    const filterOption = !!header && columnDef ? columnDef._filterFn : globalFilterFn;\n    return (jsxRuntime.jsx(core.Menu.Dropdown, { children: (_d = (header && column && columnDef\n            ? (_c = (_b = columnDef.renderColumnFilterModeMenuItems) === null || _b === void 0 ? void 0 : _b.call(columnDef, {\n                column: column,\n                internalFilterOptions,\n                onSelectFilterMode: handleSelectFilterMode,\n                table,\n            })) !== null && _c !== void 0 ? _c : renderColumnFilterModeMenuItems === null || renderColumnFilterModeMenuItems === void 0 ? void 0 : renderColumnFilterModeMenuItems({\n                column: column,\n                internalFilterOptions,\n                onSelectFilterMode: handleSelectFilterMode,\n                table,\n            })\n            : renderGlobalFilterModeMenuItems === null || renderGlobalFilterModeMenuItems === void 0 ? void 0 : renderGlobalFilterModeMenuItems({\n                internalFilterOptions,\n                onSelectFilterMode: handleSelectFilterMode,\n                table,\n            }))) !== null && _d !== void 0 ? _d : internalFilterOptions.map(({ option, label, divider, symbol }, index) => (jsxRuntime.jsxs(react.Fragment, { children: [jsxRuntime.jsxs(core.Menu.Item, { onClick: () => handleSelectFilterMode(option), color: option === filterOption ? 'blue' : undefined, sx: {\n                        '& > .mantine-Menu-itemLabel': {\n                            display: 'flex',\n                            flexWrap: 'nowrap',\n                            gap: '1ch',\n                        },\n                    }, value: option, children: [jsxRuntime.jsx(core.Flex, { sx: {\n                                fontSize: '20px',\n                                transform: 'translateY(-2px)',\n                                width: '2ch',\n                            }, children: symbol }), jsxRuntime.jsx(core.Flex, { align: \"center\", children: label })] }), divider && jsxRuntime.jsx(core.Menu.Divider, {})] }, index))) }));\n};\n\nconst MRT_GlobalFilterTextInput = ({ table, }) => {\n    const { getState, setGlobalFilter, options: { enableGlobalFilterModes, icons: { IconSearch, IconX }, localization, manualFiltering, mantineSearchTextInputProps, }, refs: { searchInputRef }, } = table;\n    const { globalFilter, showGlobalFilter } = getState();\n    const textFieldProps = mantineSearchTextInputProps instanceof Function\n        ? mantineSearchTextInputProps({ table })\n        : mantineSearchTextInputProps;\n    const isMounted = react.useRef(false);\n    const [searchValue, setSearchValue] = react.useState(globalFilter !== null && globalFilter !== void 0 ? globalFilter : '');\n    const [debouncedSearchValue] = hooks.useDebouncedValue(searchValue, manualFiltering ? 500 : 250);\n    react.useEffect(() => {\n        setGlobalFilter(debouncedSearchValue || undefined);\n    }, [debouncedSearchValue]);\n    const handleClear = () => {\n        setSearchValue('');\n        setGlobalFilter(undefined);\n    };\n    react.useEffect(() => {\n        if (isMounted.current) {\n            if (globalFilter === undefined) {\n                handleClear();\n            }\n            else {\n                setSearchValue(globalFilter);\n            }\n        }\n        isMounted.current = true;\n    }, [globalFilter]);\n    return (jsxRuntime.jsxs(core.Collapse, { in: showGlobalFilter, sx: {\n            '& > div': {\n                display: 'flex',\n                alignItems: 'center',\n                gap: '16px',\n                flexWrap: 'nowrap',\n            },\n        }, children: [enableGlobalFilterModes && (jsxRuntime.jsxs(core.Menu, { withinPortal: true, children: [jsxRuntime.jsx(core.Menu.Target, { children: jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": localization.changeSearchMode, size: \"sm\", children: jsxRuntime.jsx(IconSearch, {}) }) }), jsxRuntime.jsx(MRT_FilterOptionMenu, { table: table, onSelect: handleClear })] })), jsxRuntime.jsx(core.TextInput, Object.assign({ placeholder: localization.search, onChange: (event) => setSearchValue(event.target.value), value: searchValue !== null && searchValue !== void 0 ? searchValue : '', variant: \"filled\", icon: !enableGlobalFilterModes && jsxRuntime.jsx(IconSearch, {}), rightSection: searchValue ? (jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": localization.clearSearch, disabled: !(searchValue === null || searchValue === void 0 ? void 0 : searchValue.length), onClick: handleClear, size: \"sm\", children: jsxRuntime.jsx(core.Tooltip, { withinPortal: true, label: localization.clearSearch, children: jsxRuntime.jsx(IconX, {}) }) })) : null }, textFieldProps, { ref: (node) => {\n                    if (node) {\n                        searchInputRef.current = node;\n                        if (textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.ref) {\n                            // @ts-ignore\n                            textFieldProps.ref = node;\n                        }\n                    }\n                }, sx: (theme) => (Object.assign({ minWidth: '250px' }, ((textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.sx) instanceof Function\n                    ? textFieldProps.sx(theme)\n                    : textFieldProps === null || textFieldProps === void 0 ? void 0 : textFieldProps.sx))) }))] }));\n};\n\nconst MRT_ProgressBar = ({ isTopToolbar, table, }) => {\n    const { options: { mantineProgressProps }, getState, } = table;\n    const { isSaving, showProgressBars } = getState();\n    const linearProgressProps = mantineProgressProps instanceof Function\n        ? mantineProgressProps({ isTopToolbar, table })\n        : mantineProgressProps;\n    return (jsxRuntime.jsx(core.Collapse, { in: isSaving || showProgressBars, sx: {\n            bottom: isTopToolbar ? 0 : undefined,\n            position: 'absolute',\n            top: !isTopToolbar ? 0 : undefined,\n            width: '100%',\n        }, children: jsxRuntime.jsx(core.Progress, Object.assign({ animate: true, \"aria-busy\": \"true\", \"aria-label\": \"Loading\", radius: 0, value: 100 }, linearProgressProps)) }));\n};\n\nconst commonActionButtonStyles = {\n    userSelect: 'none',\n    '&:disabled': {\n        backgroundColor: 'transparent',\n        border: 'none',\n    },\n};\nconst MRT_TablePagination = ({ table, position = 'bottom', }) => {\n    var _a;\n    const { getPrePaginationRowModel, getState, setPageIndex, setPageSize, options: { enableToolbarInternalActions, icons: { IconChevronLeftPipe, IconChevronRightPipe, IconChevronLeft, IconChevronRight, }, localization, mantinePaginationProps, paginationDisplayMode, rowCount, }, } = table;\n    const { pagination: { pageSize = 10, pageIndex = 0 }, showGlobalFilter, } = getState();\n    const paginationProps = mantinePaginationProps instanceof Function\n        ? mantinePaginationProps({ table })\n        : mantinePaginationProps;\n    const totalRowCount = rowCount !== null && rowCount !== void 0 ? rowCount : getPrePaginationRowModel().rows.length;\n    const numberOfPages = Math.ceil(totalRowCount / pageSize);\n    const showFirstLastPageButtons = numberOfPages > 2 && (paginationProps === null || paginationProps === void 0 ? void 0 : paginationProps.withEdges) !== false;\n    const firstRowIndex = pageIndex * pageSize;\n    const lastRowIndex = Math.min(pageIndex * pageSize + pageSize, totalRowCount);\n    return (jsxRuntime.jsxs(core.Flex, { align: \"center\", justify: \"space-between\", gap: \"lg\", py: \"xs\", px: \"sm\", mt: position === 'top' && enableToolbarInternalActions && !showGlobalFilter\n            ? '3rem'\n            : undefined, p: \"relative\", sx: { zIndex: 2 }, children: [(paginationProps === null || paginationProps === void 0 ? void 0 : paginationProps.showRowsPerPage) !== false && (jsxRuntime.jsx(core.Select, { data: (_a = paginationProps === null || paginationProps === void 0 ? void 0 : paginationProps.rowsPerPageOptions) !== null && _a !== void 0 ? _a : [\n                    '5',\n                    '10',\n                    '15',\n                    '20',\n                    '25',\n                    '30',\n                    '50',\n                    '100',\n                ], label: localization.rowsPerPage, onChange: (value) => setPageSize(+value), value: pageSize.toString(), sx: {\n                    '@media (min-width: 720px)': {\n                        display: 'flex',\n                        alignItems: 'center',\n                        gap: '8px',\n                    },\n                    '& .mantine-Select-input': {\n                        width: '80px',\n                    },\n                }, withinPortal: true })), paginationDisplayMode === 'pages' ? (jsxRuntime.jsx(core.Pagination, Object.assign({ onChange: (newPageIndex) => setPageIndex(newPageIndex - 1), total: numberOfPages, value: pageIndex + 1, withEdges: showFirstLastPageButtons, nextIcon: IconChevronRight, previousIcon: IconChevronLeft, firstIcon: IconChevronLeftPipe, lastIcon: IconChevronRightPipe }, paginationProps))) : paginationDisplayMode === 'default' ? (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(core.Text, { children: `${lastRowIndex === 0 ? 0 : (firstRowIndex + 1).toLocaleString()}-${lastRowIndex.toLocaleString()} ${localization.of} ${totalRowCount.toLocaleString()}` }), jsxRuntime.jsxs(core.Flex, { gap: \"xs\", children: [showFirstLastPageButtons && (jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": localization.goToFirstPage, disabled: pageIndex <= 0, onClick: () => setPageIndex(0), sx: commonActionButtonStyles, children: jsxRuntime.jsx(IconChevronLeftPipe, {}) })), jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": localization.goToPreviousPage, disabled: pageIndex <= 0, onClick: () => setPageIndex(pageIndex - 1), sx: commonActionButtonStyles, children: jsxRuntime.jsx(IconChevronLeft, {}) }), jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": localization.goToNextPage, disabled: lastRowIndex >= totalRowCount, onClick: () => setPageIndex(pageIndex + 1), sx: commonActionButtonStyles, children: jsxRuntime.jsx(IconChevronRight, {}) }), showFirstLastPageButtons && (jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": localization.goToLastPage, disabled: lastRowIndex >= totalRowCount, onClick: () => setPageIndex(numberOfPages - 1), sx: commonActionButtonStyles, children: jsxRuntime.jsx(IconChevronRightPipe, {}) }))] })] })) : null] }));\n};\n\nconst MRT_FilterCheckbox = ({ column, table, }) => {\n    var _a, _b, _c;\n    const { getState, options: { localization, mantineFilterCheckboxProps }, } = table;\n    const { density } = getState();\n    const { columnDef } = column;\n    const mTableHeadCellFilterCheckboxProps = mantineFilterCheckboxProps instanceof Function\n        ? mantineFilterCheckboxProps({\n            column,\n            table,\n        })\n        : mantineFilterCheckboxProps;\n    const mcTableHeadCellFilterCheckboxProps = columnDef.mantineFilterCheckboxProps instanceof Function\n        ? columnDef.mantineFilterCheckboxProps({\n            column,\n            table,\n        })\n        : columnDef.mantineFilterCheckboxProps;\n    const checkboxProps = Object.assign(Object.assign({}, mTableHeadCellFilterCheckboxProps), mcTableHeadCellFilterCheckboxProps);\n    const filterLabel = (_a = localization.filterByColumn) === null || _a === void 0 ? void 0 : _a.replace('{column}', columnDef.header);\n    return (jsxRuntime.jsx(core.Tooltip, { withinPortal: true, openDelay: 1000, label: (_b = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.title) !== null && _b !== void 0 ? _b : filterLabel, children: jsxRuntime.jsx(core.Checkbox, Object.assign({ checked: column.getFilterValue() === 'true', indeterminate: column.getFilterValue() === undefined, color: column.getFilterValue() === undefined ? 'default' : 'primary', size: density === 'xs' ? 'sm' : 'md', label: (_c = checkboxProps.title) !== null && _c !== void 0 ? _c : filterLabel }, checkboxProps, { onClick: (e) => {\n                var _a;\n                e.stopPropagation();\n                (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onClick) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n            }, onChange: (e) => {\n                var _a;\n                column.setFilterValue(column.getFilterValue() === undefined\n                    ? 'true'\n                    : column.getFilterValue() === 'true'\n                        ? 'false'\n                        : undefined);\n                (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onChange) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, e);\n            }, sx: (theme) => (Object.assign({ fontWeight: 'normal', marginTop: '8px' }, ((checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.sx) instanceof Function\n                ? checkboxProps.sx(theme)\n                : checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.sx))), title: undefined })) }));\n};\n\nconst MRT_FilterTextInput = ({ header, rangeFilterIndex, table, }) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    const { options: { columnFilterDisplayMode, columnFilterModeOptions, icons: { IconX }, localization, mantineFilterAutocompleteProps, mantineFilterDateInputProps, mantineFilterMultiSelectProps, mantineFilterSelectProps, mantineFilterTextInputProps, manualFiltering, }, refs: { filterInputRefs }, setColumnFilterFns, } = table;\n    const { column } = header;\n    const { columnDef } = column;\n    const mFilterTextInputProps = mantineFilterTextInputProps instanceof Function\n        ? mantineFilterTextInputProps({\n            column,\n            table,\n            rangeFilterIndex,\n        })\n        : mantineFilterTextInputProps;\n    const mcFilterTextInputProps = columnDef.mantineFilterTextInputProps instanceof Function\n        ? columnDef.mantineFilterTextInputProps({\n            column,\n            table,\n            rangeFilterIndex,\n        })\n        : columnDef.mantineFilterTextInputProps;\n    const textInputProps = Object.assign(Object.assign({}, mFilterTextInputProps), mcFilterTextInputProps);\n    const mSelectProps = mantineFilterSelectProps instanceof Function\n        ? mantineFilterSelectProps({ column, table, rangeFilterIndex })\n        : mantineFilterSelectProps;\n    const mcSelectProps = columnDef.mantineFilterSelectProps instanceof Function\n        ? columnDef.mantineFilterSelectProps({ column, table, rangeFilterIndex })\n        : columnDef.mantineFilterSelectProps;\n    const selectProps = Object.assign(Object.assign({}, mSelectProps), mcSelectProps);\n    const mMultiSelectProps = mantineFilterMultiSelectProps instanceof Function\n        ? mantineFilterMultiSelectProps({ column, table, rangeFilterIndex })\n        : mantineFilterMultiSelectProps;\n    const mcMultiSelectProps = columnDef.mantineFilterMultiSelectProps instanceof Function\n        ? columnDef.mantineFilterMultiSelectProps({\n            column,\n            table,\n            rangeFilterIndex,\n        })\n        : columnDef.mantineFilterMultiSelectProps;\n    const multiSelectProps = Object.assign(Object.assign({}, mMultiSelectProps), mcMultiSelectProps);\n    const mDateInputProps = mantineFilterDateInputProps instanceof Function\n        ? mantineFilterDateInputProps({ column, table, rangeFilterIndex })\n        : mantineFilterDateInputProps;\n    const mcDateInputProps = columnDef.mantineFilterDateInputProps instanceof Function\n        ? columnDef.mantineFilterDateInputProps({\n            column,\n            table,\n            rangeFilterIndex,\n        })\n        : columnDef.mantineFilterDateInputProps;\n    const dateInputProps = Object.assign(Object.assign({}, mDateInputProps), mcDateInputProps);\n    const mAutoCompleteProps = mantineFilterAutocompleteProps instanceof Function\n        ? mantineFilterAutocompleteProps({ column, table, rangeFilterIndex })\n        : mantineFilterAutocompleteProps;\n    const mcAutoCompleteProps = columnDef.mantineFilterAutocompleteProps instanceof Function\n        ? columnDef.mantineFilterAutocompleteProps({\n            column,\n            table,\n            rangeFilterIndex,\n        })\n        : columnDef.mantineFilterAutocompleteProps;\n    const autoCompleteProps = Object.assign(Object.assign({}, mAutoCompleteProps), mcAutoCompleteProps);\n    const isRangeFilter = columnDef.filterVariant === 'range' ||\n        columnDef.filterVariant === 'date-range' ||\n        rangeFilterIndex !== undefined;\n    const isSelectFilter = columnDef.filterVariant === 'select';\n    const isMultiSelectFilter = columnDef.filterVariant === 'multi-select';\n    const isDateFilter = columnDef.filterVariant === 'date' ||\n        columnDef.filterVariant === 'date-range';\n    const isAutoCompleteFilter = columnDef.filterVariant === 'autocomplete';\n    const allowedColumnFilterOptions = (_a = columnDef === null || columnDef === void 0 ? void 0 : columnDef.columnFilterModeOptions) !== null && _a !== void 0 ? _a : columnFilterModeOptions;\n    const currentFilterOption = columnDef._filterFn;\n    const filterChipLabel = ['empty', 'notEmpty'].includes(currentFilterOption)\n        ? //@ts-ignore\n            localization[`filter${((_c = (_b = currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.charAt) === null || _b === void 0 ? void 0 : _b.call(currentFilterOption, 0)) === null || _c === void 0 ? void 0 : _c.toUpperCase()) +\n                (currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.slice(1))}`]\n        : '';\n    const filterPlaceholder = !isRangeFilter\n        ? (_d = textInputProps === null || textInputProps === void 0 ? void 0 : textInputProps.placeholder) !== null && _d !== void 0 ? _d : (_e = localization.filterByColumn) === null || _e === void 0 ? void 0 : _e.replace('{column}', String(columnDef.header))\n        : rangeFilterIndex === 0\n            ? localization.min\n            : rangeFilterIndex === 1\n                ? localization.max\n                : '';\n    const facetedUniqueValues = column.getFacetedUniqueValues();\n    const filterSelectOptions = react.useMemo(() => {\n        var _a, _b, _c;\n        return ((_c = (_b = (_a = autoCompleteProps === null || autoCompleteProps === void 0 ? void 0 : autoCompleteProps.data) !== null && _a !== void 0 ? _a : selectProps === null || selectProps === void 0 ? void 0 : selectProps.data) !== null && _b !== void 0 ? _b : multiSelectProps === null || multiSelectProps === void 0 ? void 0 : multiSelectProps.data) !== null && _c !== void 0 ? _c : ((isAutoCompleteFilter || isSelectFilter || isMultiSelectFilter) &&\n            facetedUniqueValues\n            ? Array.from(facetedUniqueValues.keys()).sort((a, b) => a.localeCompare(b))\n            : []))\n            //@ts-ignore\n            .filter((o) => o !== undefined && o !== null);\n    }, [\n        autoCompleteProps === null || autoCompleteProps === void 0 ? void 0 : autoCompleteProps.data,\n        facetedUniqueValues,\n        isAutoCompleteFilter,\n        isMultiSelectFilter,\n        isSelectFilter,\n        multiSelectProps === null || multiSelectProps === void 0 ? void 0 : multiSelectProps.data,\n        selectProps === null || selectProps === void 0 ? void 0 : selectProps.data,\n    ]);\n    const isMounted = react.useRef(false);\n    const [filterValue, setFilterValue] = react.useState(() => {\n        var _a, _b;\n        return isMultiSelectFilter\n            ? column.getFilterValue() || []\n            : isRangeFilter\n                ? ((_a = column.getFilterValue()) === null || _a === void 0 ? void 0 : _a[rangeFilterIndex]) || ''\n                : (_b = column.getFilterValue()) !== null && _b !== void 0 ? _b : '';\n    });\n    const [debouncedFilterValue] = hooks.useDebouncedValue(filterValue, manualFiltering ? 400 : 200);\n    //send debounced filterValue to table instance\n    react.useEffect(() => {\n        if (!isMounted.current)\n            return;\n        if (isRangeFilter) {\n            column.setFilterValue((old) => {\n                const newFilterValues = Array.isArray(old) ? old : ['', ''];\n                newFilterValues[rangeFilterIndex] =\n                    debouncedFilterValue;\n                return newFilterValues;\n            });\n        }\n        else {\n            column.setFilterValue(debouncedFilterValue !== null && debouncedFilterValue !== void 0 ? debouncedFilterValue : undefined);\n        }\n    }, [debouncedFilterValue]);\n    //receive table filter value and set it to local state\n    react.useEffect(() => {\n        if (!isMounted.current) {\n            isMounted.current = true;\n            return;\n        }\n        const tableFilterValue = column.getFilterValue();\n        if (tableFilterValue === undefined) {\n            handleClear();\n        }\n        else if (isRangeFilter && rangeFilterIndex !== undefined) {\n            setFilterValue((tableFilterValue !== null && tableFilterValue !== void 0 ? tableFilterValue : ['', ''])[rangeFilterIndex]);\n        }\n        else {\n            setFilterValue(tableFilterValue !== null && tableFilterValue !== void 0 ? tableFilterValue : '');\n        }\n    }, [column.getFilterValue()]);\n    const handleClear = () => {\n        if (isMultiSelectFilter) {\n            setFilterValue([]);\n            column.setFilterValue([]);\n        }\n        else if (isRangeFilter) {\n            setFilterValue('');\n            column.setFilterValue((old) => {\n                const newFilterValues = Array.isArray(old) ? old : ['', ''];\n                newFilterValues[rangeFilterIndex] = undefined;\n                return newFilterValues;\n            });\n        }\n        else {\n            setFilterValue('');\n            column.setFilterValue(undefined);\n        }\n    };\n    if (columnDef.Filter) {\n        return (jsxRuntime.jsx(jsxRuntime.Fragment, { children: (_f = columnDef.Filter) === null || _f === void 0 ? void 0 : _f.call(columnDef, { column, header, rangeFilterIndex, table }) }));\n    }\n    const handleClearEmptyFilterChip = () => {\n        setFilterValue('');\n        column.setFilterValue(undefined);\n        setColumnFilterFns((prev) => {\n            var _a;\n            return (Object.assign(Object.assign({}, prev), { [header.id]: (_a = allowedColumnFilterOptions === null || allowedColumnFilterOptions === void 0 ? void 0 : allowedColumnFilterOptions[0]) !== null && _a !== void 0 ? _a : 'fuzzy' }));\n        });\n    };\n    const commonProps = {\n        disabled: !!filterChipLabel,\n        placeholder: filterPlaceholder,\n        title: filterPlaceholder,\n        onClick: (event) => event.stopPropagation(),\n        onChange: setFilterValue,\n        value: filterValue,\n        variant: 'unstyled',\n        sx: (theme) => (Object.assign({ borderBottom: `2px solid ${theme.colors.gray[theme.colorScheme === 'dark' ? 7 : 3]}`, minWidth: isDateFilter\n                ? '125px'\n                : isRangeFilter\n                    ? '80px'\n                    : !filterChipLabel\n                        ? '100px'\n                        : 'auto', width: '100%', '& .mantine-TextInput-input': {\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n            }, '& .mantine-DateInput-input': {\n                height: '2.1rem',\n            } }, core.packSx(isMultiSelectFilter\n            ? multiSelectProps.sx\n            : isSelectFilter\n                ? selectProps.sx\n                : isDateFilter\n                    ? dateInputProps.sx\n                    : textInputProps === null || textInputProps === void 0 ? void 0 : textInputProps.sx))),\n    };\n    const ClearButton = filterValue ? (jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": localization.clearFilter, onClick: handleClear, size: \"sm\", title: (_g = localization.clearFilter) !== null && _g !== void 0 ? _g : '', children: jsxRuntime.jsx(IconX, {}) })) : null;\n    return filterChipLabel ? (jsxRuntime.jsx(core.Box, { sx: commonProps.sx, children: jsxRuntime.jsx(core.Badge, { size: \"lg\", onClick: handleClearEmptyFilterChip, sx: { margin: '5px' }, rightSection: ClearButton, children: filterChipLabel }) })) : isMultiSelectFilter ? (jsxRuntime.jsx(core.MultiSelect, Object.assign({}, commonProps, { clearable: true, searchable: true, withinPortal: true }, multiSelectProps, { data: filterSelectOptions, ref: (node) => {\n            if (node) {\n                filterInputRefs.current[`${column.id}-${rangeFilterIndex !== null && rangeFilterIndex !== void 0 ? rangeFilterIndex : 0}`] =\n                    node;\n                if (multiSelectProps.ref) {\n                    multiSelectProps.ref.current = node;\n                }\n            }\n        }, sx: commonProps.sx }))) : isSelectFilter ? (jsxRuntime.jsx(core.Select, Object.assign({}, commonProps, { clearable: true, searchable: true, withinPortal: true }, selectProps, { data: filterSelectOptions, ref: (node) => {\n            if (node) {\n                filterInputRefs.current[`${column.id}-${rangeFilterIndex !== null && rangeFilterIndex !== void 0 ? rangeFilterIndex : 0}`] =\n                    node;\n                if (selectProps.ref) {\n                    selectProps.ref.current = node;\n                }\n            }\n        }, sx: commonProps.sx }))) : isDateFilter ? (jsxRuntime.jsx(dates.DateInput, Object.assign({}, commonProps, { allowDeselect: true, clearable: true, popoverProps: { withinPortal: columnFilterDisplayMode !== 'popover' } }, dateInputProps, { ref: (node) => {\n            if (node) {\n                filterInputRefs.current[`${column.id}-${rangeFilterIndex !== null && rangeFilterIndex !== void 0 ? rangeFilterIndex : 0}`] =\n                    node;\n                if (dateInputProps.ref) {\n                    dateInputProps.ref.current = node;\n                }\n            }\n        }, sx: commonProps.sx }))) : isAutoCompleteFilter ? (jsxRuntime.jsx(core.Autocomplete, Object.assign({}, commonProps, { rightSection: ((_h = filterValue === null || filterValue === void 0 ? void 0 : filterValue.toString()) === null || _h === void 0 ? void 0 : _h.length) ? ClearButton : undefined, onChange: (value) => setFilterValue(value), withinPortal: true }, autoCompleteProps, { data: filterSelectOptions, ref: (node) => {\n            if (node) {\n                filterInputRefs.current[`${column.id}-${rangeFilterIndex !== null && rangeFilterIndex !== void 0 ? rangeFilterIndex : 0}`] =\n                    node;\n                if (autoCompleteProps.ref) {\n                    autoCompleteProps.ref.current = node;\n                }\n            }\n        }, sx: commonProps.sx }))) : (jsxRuntime.jsx(core.TextInput, Object.assign({}, commonProps, { rightSection: ((_j = filterValue === null || filterValue === void 0 ? void 0 : filterValue.toString()) === null || _j === void 0 ? void 0 : _j.length) ? ClearButton : undefined, onChange: (e) => setFilterValue(e.target.value) }, textInputProps, { ref: (node) => {\n            if (node) {\n                filterInputRefs.current[`${column.id}-${rangeFilterIndex !== null && rangeFilterIndex !== void 0 ? rangeFilterIndex : 0}`] =\n                    node;\n                if (textInputProps.ref) {\n                    textInputProps.ref.current = node;\n                }\n            }\n        }, sx: commonProps.sx })));\n};\n\nconst MRT_FilterRangeFields = ({ header, table, }) => {\n    return (jsxRuntime.jsxs(core.Box, { sx: { display: 'grid', gridTemplateColumns: '6fr 6fr', gap: '16px' }, children: [jsxRuntime.jsx(MRT_FilterTextInput, { header: header, rangeFilterIndex: 0, table: table }), jsxRuntime.jsx(MRT_FilterTextInput, { header: header, rangeFilterIndex: 1, table: table })] }));\n};\n\nconst MRT_ToolbarAlertBanner = ({ stackAlertBanner, table, }) => {\n    var _a, _b, _c;\n    const { getPrePaginationRowModel, getSelectedRowModel, getState, options: { enableRowSelection, enableSelectAll, icons: { IconX }, localization, mantineToolbarAlertBannerBadgeProps, mantineToolbarAlertBannerProps, positionToolbarAlertBanner, renderToolbarAlertBannerContent, rowCount, }, } = table;\n    const { grouping, showAlertBanner, density } = getState();\n    const alertProps = mantineToolbarAlertBannerProps instanceof Function\n        ? mantineToolbarAlertBannerProps({ table })\n        : mantineToolbarAlertBannerProps;\n    const badgeProps = mantineToolbarAlertBannerBadgeProps instanceof Function\n        ? mantineToolbarAlertBannerBadgeProps({ table })\n        : mantineToolbarAlertBannerBadgeProps;\n    const selectedAlert = getSelectedRowModel().rows.length > 0\n        ? (_b = (_a = localization.selectedCountOfRowCountRowsSelected) === null || _a === void 0 ? void 0 : _a.replace('{selectedCount}', getSelectedRowModel().rows.length.toString())) === null || _b === void 0 ? void 0 : _b.replace('{rowCount}', (rowCount !== null && rowCount !== void 0 ? rowCount : getPrePaginationRowModel().rows.length).toString())\n        : null;\n    const groupedAlert = grouping.length > 0 ? (jsxRuntime.jsxs(core.Flex, { children: [localization.groupedBy, ' ', grouping.map((columnId, index) => (jsxRuntime.jsxs(react.Fragment, { children: [index > 0 ? localization.thenBy : '', jsxRuntime.jsxs(core.Badge, Object.assign({ rightSection: jsxRuntime.jsx(core.ActionIcon, { onClick: () => table.getColumn(columnId).toggleGrouping(), size: \"xs\", children: jsxRuntime.jsx(IconX, {}) }), sx: { marginLeft: '1ch' }, variant: \"filled\" }, badgeProps, { children: [table.getColumn(columnId).columnDef.header, ' '] }))] }, `${index}-${columnId}`)))] })) : null;\n    return (jsxRuntime.jsx(core.Collapse, { in: showAlertBanner || !!selectedAlert || !!groupedAlert, transitionDuration: stackAlertBanner ? 200 : 0, children: jsxRuntime.jsx(core.Alert, Object.assign({ color: \"blue\", icon: false }, alertProps, { sx: (theme) => (Object.assign({ borderRadius: 0, fontSize: '16px', left: 0, position: 'relative', marginBottom: stackAlertBanner\n                    ? 0\n                    : positionToolbarAlertBanner === 'bottom'\n                        ? '-16px'\n                        : undefined, padding: '8px', right: 0, top: 0, width: '100%', zIndex: 2 }, ((alertProps === null || alertProps === void 0 ? void 0 : alertProps.sx) instanceof Function\n                ? alertProps.sx(theme)\n                : alertProps === null || alertProps === void 0 ? void 0 : alertProps.sx))), children: (_c = renderToolbarAlertBannerContent === null || renderToolbarAlertBannerContent === void 0 ? void 0 : renderToolbarAlertBannerContent({\n                groupedAlert,\n                selectedAlert,\n                table,\n            })) !== null && _c !== void 0 ? _c : (jsxRuntime.jsxs(core.Flex, { sx: {\n                    gap: '12px',\n                    padding: positionToolbarAlertBanner === 'head-overlay'\n                        ? density === 'xl'\n                            ? '16px'\n                            : density === 'md'\n                                ? '8px'\n                                : '2px'\n                        : '8px 16px',\n                }, children: [enableRowSelection &&\n                        enableSelectAll &&\n                        positionToolbarAlertBanner === 'head-overlay' && (jsxRuntime.jsx(MRT_SelectCheckbox, { selectAll: true, table: table })), jsxRuntime.jsxs(core.Stack, { children: [alertProps === null || alertProps === void 0 ? void 0 : alertProps.children, (alertProps === null || alertProps === void 0 ? void 0 : alertProps.children) && (selectedAlert || groupedAlert) && (jsxRuntime.jsx(\"br\", {})), selectedAlert, selectedAlert && groupedAlert && jsxRuntime.jsx(\"br\", {}), groupedAlert] })] })) })) }));\n};\n\nconst MRT_ToggleFullScreenButton = (_a) => {\n    var _b;\n    var { table } = _a, rest = __rest(_a, [\"table\"]);\n    const { getState, options: { icons: { IconMinimize, IconMaximize }, localization, }, setIsFullScreen, } = table;\n    const { isFullScreen } = getState();\n    const [tooltipOpened, setTooltipOpened] = react.useState(false);\n    const handleToggleFullScreen = () => {\n        setTooltipOpened(false);\n        setIsFullScreen(!isFullScreen);\n    };\n    return (jsxRuntime.jsx(core.Tooltip, { opened: tooltipOpened, withinPortal: true, label: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.toggleFullScreen, children: jsxRuntime.jsx(core.ActionIcon, Object.assign({ \"aria-label\": localization.toggleFullScreen, onClick: handleToggleFullScreen, onMouseEnter: () => setTooltipOpened(true), onMouseLeave: () => setTooltipOpened(false), size: \"lg\" }, rest, { title: undefined, children: isFullScreen ? jsxRuntime.jsx(IconMinimize, {}) : jsxRuntime.jsx(IconMaximize, {}) })) }));\n};\n\nconst MRT_ColumnPinningButtons = ({ column, table, }) => {\n    const { options: { icons: { IconPinned, IconPinnedOff }, localization, }, } = table;\n    const handlePinColumn = (pinDirection) => {\n        column.pin(pinDirection);\n    };\n    return (jsxRuntime.jsx(core.Flex, { sx: {\n            minWidth: '70px',\n            alignContent: 'center',\n            justifyContent: 'center',\n        }, children: column.getIsPinned() ? (jsxRuntime.jsx(core.Tooltip, { withinPortal: true, label: localization.unpin, children: jsxRuntime.jsx(core.ActionIcon, { onClick: () => handlePinColumn(false), size: \"md\", children: jsxRuntime.jsx(IconPinnedOff, {}) }) })) : (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(core.Tooltip, { withinPortal: true, label: localization.pinToLeft, children: jsxRuntime.jsx(core.ActionIcon, { onClick: () => handlePinColumn('left'), size: \"md\", children: jsxRuntime.jsx(IconPinned, { style: {\n                                transform: 'rotate(90deg)',\n                            } }) }) }), jsxRuntime.jsx(core.Tooltip, { withinPortal: true, label: localization.pinToRight, children: jsxRuntime.jsx(core.ActionIcon, { onClick: () => handlePinColumn('right'), size: \"md\", children: jsxRuntime.jsx(IconPinned, { style: {\n                                transform: 'rotate(-90deg)',\n                            } }) }) })] })) }));\n};\n\nconst MRT_ShowHideColumnsMenuItems = ({ allColumns, hoveredColumn, setHoveredColumn, column, isSubMenu, table, }) => {\n    var _a;\n    const { getState, options: { enableColumnOrdering, enableHiding, enablePinning, localization, }, setColumnOrder, } = table;\n    const { columnOrder } = getState();\n    const { columnDef } = column;\n    const { columnDefType } = columnDef;\n    const switchChecked = (columnDefType !== 'group' && column.getIsVisible()) ||\n        (columnDefType === 'group' &&\n            column.getLeafColumns().some((col) => col.getIsVisible()));\n    const handleToggleColumnHidden = (column) => {\n        var _a, _b;\n        if (columnDefType === 'group') {\n            (_b = (_a = column === null || column === void 0 ? void 0 : column.columns) === null || _a === void 0 ? void 0 : _a.forEach) === null || _b === void 0 ? void 0 : _b.call(_a, (childColumn) => {\n                childColumn.toggleVisibility(!switchChecked);\n            });\n        }\n        else {\n            column.toggleVisibility();\n        }\n    };\n    const menuItemRef = react.useRef(null);\n    const [isDragging, setIsDragging] = react.useState(false);\n    const handleDragStart = (e) => {\n        setIsDragging(true);\n        e.dataTransfer.setDragImage(menuItemRef.current, 0, 0);\n    };\n    const handleDragEnd = (_e) => {\n        setIsDragging(false);\n        setHoveredColumn(null);\n        if (hoveredColumn) {\n            setColumnOrder(reorderColumn(column, hoveredColumn, columnOrder));\n        }\n    };\n    const handleDragEnter = (_e) => {\n        if (!isDragging && columnDef.enableColumnOrdering !== false) {\n            setHoveredColumn(column);\n        }\n    };\n    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(core.Menu.Item, { component: \"span\", ref: menuItemRef, onDragEnter: handleDragEnter, sx: (theme) => ({\n                    alignItems: 'center',\n                    cursor: 'default',\n                    justifyContent: 'flex-start',\n                    opacity: isDragging ? 0.5 : 1,\n                    outline: isDragging\n                        ? `1px dashed ${theme.colors.gray[7]}`\n                        : (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === column.id\n                            ? `2px dashed ${getPrimaryColor(theme)}`\n                            : 'none',\n                    paddingLeft: `${(column.depth + 0.5) * 2}rem`,\n                    paddingTop: '6px',\n                    paddingBottom: '6px',\n                }), children: jsxRuntime.jsxs(core.Box, { sx: {\n                        display: 'flex',\n                        flexWrap: 'nowrap',\n                        gap: '8px',\n                    }, children: [!isSubMenu &&\n                            columnDefType !== 'group' &&\n                            enableColumnOrdering &&\n                            !allColumns.some((col) => col.columnDef.columnDefType === 'group') &&\n                            (columnDef.enableColumnOrdering !== false ? (jsxRuntime.jsx(MRT_GrabHandleButton, { onDragEnd: handleDragEnd, onDragStart: handleDragStart, table: table })) : (jsxRuntime.jsx(core.Box, { sx: { width: '22px' } }))), !isSubMenu &&\n                            enablePinning &&\n                            (column.getCanPin() ? (jsxRuntime.jsx(MRT_ColumnPinningButtons, { column: column, table: table })) : (jsxRuntime.jsx(core.Box, { sx: { width: '70px' } }))), enableHiding ? (jsxRuntime.jsx(core.Tooltip, { withinPortal: true, openDelay: 1000, label: localization.toggleVisibility, children: jsxRuntime.jsx(core.Switch, { checked: switchChecked, disabled: (isSubMenu && switchChecked) || !column.getCanHide(), label: columnDef.header, onChange: () => handleToggleColumnHidden(column), sx: {\n                                    cursor: 'pointer !important',\n                                } }) })) : (jsxRuntime.jsx(core.Text, { sx: { alignSelf: 'center' }, children: columnDef.header }))] }) }), (_a = column.columns) === null || _a === void 0 ? void 0 : _a.map((c, i) => (jsxRuntime.jsx(MRT_ShowHideColumnsMenuItems, { allColumns: allColumns, column: c, hoveredColumn: hoveredColumn, isSubMenu: isSubMenu, setHoveredColumn: setHoveredColumn, table: table }, `${i}-${c.id}`)))] }));\n};\n\nconst MRT_ShowHideColumnsMenu = ({ isSubMenu, table, }) => {\n    const { getAllColumns, getAllLeafColumns, getCenterLeafColumns, getIsAllColumnsVisible, getIsSomeColumnsPinned, getIsSomeColumnsVisible, getLeftLeafColumns, getRightLeafColumns, getState, toggleAllColumnsVisible, options: { enableColumnOrdering, enableHiding, enablePinning, localization, }, } = table;\n    const { columnOrder, columnPinning } = getState();\n    const hideAllColumns = () => {\n        getAllLeafColumns()\n            .filter((col) => col.columnDef.enableHiding !== false)\n            .forEach((col) => col.toggleVisibility(false));\n    };\n    const allColumns = react.useMemo(() => {\n        const columns = getAllColumns();\n        if (columnOrder.length > 0 &&\n            !columns.some((col) => col.columnDef.columnDefType === 'group')) {\n            return [\n                ...getLeftLeafColumns(),\n                ...Array.from(new Set(columnOrder)).map((colId) => getCenterLeafColumns().find((col) => (col === null || col === void 0 ? void 0 : col.id) === colId)),\n                ...getRightLeafColumns(),\n            ].filter(Boolean);\n        }\n        return columns;\n    }, [\n        columnOrder,\n        columnPinning,\n        getAllColumns(),\n        getCenterLeafColumns(),\n        getLeftLeafColumns(),\n        getRightLeafColumns(),\n    ]);\n    const [hoveredColumn, setHoveredColumn] = react.useState(null);\n    return (jsxRuntime.jsxs(core.Menu.Dropdown, { sx: {\n            maxHeight: 'calc(80vh - 100px)',\n            overflowY: 'auto',\n        }, children: [jsxRuntime.jsxs(core.Flex, { sx: {\n                    justifyContent: isSubMenu ? 'center' : 'space-between',\n                    padding: '8px',\n                    gap: '8px',\n                }, children: [!isSubMenu && enableHiding && (jsxRuntime.jsx(core.Button, { disabled: !getIsSomeColumnsVisible(), onClick: hideAllColumns, variant: \"subtle\", children: localization.hideAll })), !isSubMenu && enableColumnOrdering && (jsxRuntime.jsx(core.Button, { onClick: () => table.setColumnOrder(getDefaultColumnOrderIds(table.options)), variant: \"subtle\", children: localization.resetOrder })), !isSubMenu && enablePinning && (jsxRuntime.jsx(core.Button, { disabled: !getIsSomeColumnsPinned(), onClick: () => table.resetColumnPinning(true), variant: \"subtle\", children: localization.unpinAll })), enableHiding && (jsxRuntime.jsx(core.Button, { disabled: getIsAllColumnsVisible(), onClick: () => toggleAllColumnsVisible(true), variant: \"subtle\", children: localization.showAll }))] }), jsxRuntime.jsx(core.Divider, {}), allColumns.map((column, index) => (jsxRuntime.jsx(MRT_ShowHideColumnsMenuItems, { allColumns: allColumns, column: column, hoveredColumn: hoveredColumn, isSubMenu: isSubMenu, setHoveredColumn: setHoveredColumn, table: table }, `${index}-${column.id}`)))] }));\n};\n\nconst MRT_ShowHideColumnsButton = (_a) => {\n    var _b;\n    var { table } = _a, rest = __rest(_a, [\"table\"]);\n    const { options: { icons: { IconColumns }, localization, }, } = table;\n    return (jsxRuntime.jsxs(core.Menu, { closeOnItemClick: false, withinPortal: true, children: [jsxRuntime.jsx(core.Tooltip, { withinPortal: true, label: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.showHideColumns, children: jsxRuntime.jsx(core.Menu.Target, { children: jsxRuntime.jsx(core.ActionIcon, Object.assign({ \"aria-label\": localization.showHideColumns, size: \"lg\" }, rest, { title: undefined, children: jsxRuntime.jsx(IconColumns, {}) })) }) }), jsxRuntime.jsx(MRT_ShowHideColumnsMenu, { table: table })] }));\n};\n\nconst sizes = ['xs', 'md', 'xl'];\nconst MRT_ToggleDensePaddingButton = (_a) => {\n    var _b;\n    var { table } = _a, rest = __rest(_a, [\"table\"]);\n    const { getState, options: { icons: { IconBaselineDensityLarge, IconBaselineDensityMedium, IconBaselineDensitySmall, }, localization, }, setDensity, } = table;\n    const { density } = getState();\n    const handleToggleDensePadding = () => {\n        var _a;\n        setDensity((_a = sizes[(sizes.indexOf(density) - 1) % sizes.length]) !== null && _a !== void 0 ? _a : 'xl');\n    };\n    return (jsxRuntime.jsx(core.Tooltip, { withinPortal: true, label: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.toggleDensity, children: jsxRuntime.jsx(core.ActionIcon, Object.assign({ \"aria-label\": localization.toggleDensity, onClick: handleToggleDensePadding, size: \"lg\" }, rest, { title: undefined, children: density === 'xs' ? (jsxRuntime.jsx(IconBaselineDensitySmall, {})) : density === 'md' ? (jsxRuntime.jsx(IconBaselineDensityMedium, {})) : (jsxRuntime.jsx(IconBaselineDensityLarge, {})) })) }));\n};\n\nconst MRT_ToggleFiltersButton = (_a) => {\n    var _b;\n    var { table } = _a, rest = __rest(_a, [\"table\"]);\n    const { getState, options: { icons: { IconFilter, IconFilterOff }, localization, }, setShowColumnFilters, } = table;\n    const { showColumnFilters } = getState();\n    const handleToggleShowFilters = () => {\n        setShowColumnFilters(!showColumnFilters);\n    };\n    return (jsxRuntime.jsx(core.Tooltip, { withinPortal: true, label: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.showHideFilters, children: jsxRuntime.jsx(core.ActionIcon, Object.assign({ \"aria-label\": localization.showHideFilters, onClick: handleToggleShowFilters, size: \"lg\" }, rest, { title: undefined, children: showColumnFilters ? jsxRuntime.jsx(IconFilterOff, {}) : jsxRuntime.jsx(IconFilter, {}) })) }));\n};\n\nconst MRT_ToggleGlobalFilterButton = (_a) => {\n    var _b, _c;\n    var { table } = _a, rest = __rest(_a, [\"table\"]);\n    const { getState, options: { icons: { IconSearch, IconSearchOff }, localization, }, refs: { searchInputRef }, setShowGlobalFilter, } = table;\n    const { globalFilter, showGlobalFilter } = getState();\n    const handleToggleSearch = () => {\n        setShowGlobalFilter(!showGlobalFilter);\n        setTimeout(() => { var _a; return (_a = searchInputRef.current) === null || _a === void 0 ? void 0 : _a.focus(); }, 100);\n    };\n    return (jsxRuntime.jsx(core.Tooltip, { withinPortal: true, label: (_b = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _b !== void 0 ? _b : localization.showHideSearch, children: jsxRuntime.jsx(core.ActionIcon, Object.assign({ \"aria-label\": (_c = rest === null || rest === void 0 ? void 0 : rest.title) !== null && _c !== void 0 ? _c : localization.showHideSearch, disabled: !!globalFilter, onClick: handleToggleSearch, size: \"lg\" }, rest, { title: undefined, children: showGlobalFilter ? jsxRuntime.jsx(IconSearchOff, {}) : jsxRuntime.jsx(IconSearch, {}) })) }));\n};\n\nconst MRT_ToolbarInternalButtons = ({ table, }) => {\n    var _a;\n    const { options: { columnFilterDisplayMode, enableColumnFilters, enableColumnOrdering, enableDensityToggle, enableFilters, enableFullScreenToggle, enableGlobalFilter, enableHiding, enablePinning, initialState, renderToolbarInternalActions, }, } = table;\n    return (jsxRuntime.jsx(core.Flex, { sx: {\n            alignItems: 'center',\n            gap: '2px',\n            zIndex: 3,\n        }, children: (_a = renderToolbarInternalActions === null || renderToolbarInternalActions === void 0 ? void 0 : renderToolbarInternalActions({\n            table,\n        })) !== null && _a !== void 0 ? _a : (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [enableFilters &&\n                    enableGlobalFilter &&\n                    !(initialState === null || initialState === void 0 ? void 0 : initialState.showGlobalFilter) && (jsxRuntime.jsx(MRT_ToggleGlobalFilterButton, { table: table })), enableFilters &&\n                    enableColumnFilters &&\n                    columnFilterDisplayMode !== 'popover' && (jsxRuntime.jsx(MRT_ToggleFiltersButton, { table: table })), (enableHiding || enableColumnOrdering || enablePinning) && (jsxRuntime.jsx(MRT_ShowHideColumnsButton, { table: table })), enableDensityToggle && (jsxRuntime.jsx(MRT_ToggleDensePaddingButton, { table: table })), enableFullScreenToggle && (jsxRuntime.jsx(MRT_ToggleFullScreenButton, { table: table }))] })) }));\n};\n\nconst MRT_ToolbarDropZone = ({ table, }) => {\n    const { getState, options: { enableGrouping, localization }, setHoveredColumn, setShowToolbarDropZone, } = table;\n    const { draggingColumn, hoveredColumn, grouping, showToolbarDropZone } = getState();\n    const handleDragEnter = (_event) => {\n        setHoveredColumn({ id: 'drop-zone' });\n    };\n    react.useEffect(() => {\n        var _a;\n        if (((_a = table.options.state) === null || _a === void 0 ? void 0 : _a.showToolbarDropZone) !== undefined) {\n            setShowToolbarDropZone(!!enableGrouping &&\n                !!draggingColumn &&\n                draggingColumn.columnDef.enableGrouping !== false &&\n                !grouping.includes(draggingColumn.id));\n        }\n    }, [enableGrouping, draggingColumn, grouping]);\n    return (jsxRuntime.jsx(core.Transition, { mounted: showToolbarDropZone, transition: \"fade\", children: (styles) => {\n            var _a, _b;\n            return (jsxRuntime.jsx(core.Flex, { className: \"mantine-ToolbarDropZone\", sx: (theme) => ({\n                    alignItems: 'center',\n                    backgroundColor: theme.fn.rgba(getPrimaryColor(theme), (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === 'drop-zone' ? 0.2 : 0.1),\n                    border: `dashed ${getPrimaryColor(theme)} 2px`,\n                    justifyContent: 'center',\n                    height: 'calc(100%)',\n                    position: 'absolute',\n                    width: 'calc(100%)',\n                    zIndex: 2,\n                }), onDragEnter: handleDragEnter, style: styles, children: jsxRuntime.jsx(core.Text, { children: localization.dropToGroupBy.replace('{column}', (_b = (_a = draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.columnDef) === null || _a === void 0 ? void 0 : _a.header) !== null && _b !== void 0 ? _b : '') }) }));\n        } }));\n};\n\nconst commonToolbarStyles = ({ theme }) => ({\n    alignItems: 'flex-start',\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    backgroundImage: 'none',\n    display: 'grid',\n    flexWrap: 'wrap-reverse',\n    minHeight: '3.5rem',\n    overflow: 'visible',\n    padding: '0',\n    transition: 'all 100ms ease-in-out',\n    zIndex: 3,\n});\nconst MRT_TopToolbar = ({ table, }) => {\n    var _a;\n    const { getState, options: { enableGlobalFilter, enablePagination, enableToolbarInternalActions, mantineTopToolbarProps, positionGlobalFilter, positionPagination, positionToolbarAlertBanner, positionToolbarDropZone, renderTopToolbarCustomActions, }, refs: { topToolbarRef }, } = table;\n    const { isFullScreen, showGlobalFilter } = getState();\n    const isMobile = hooks.useMediaQuery('(max-width: 720px)');\n    const toolbarProps = mantineTopToolbarProps instanceof Function\n        ? mantineTopToolbarProps({ table })\n        : mantineTopToolbarProps;\n    const stackAlertBanner = isMobile || !!renderTopToolbarCustomActions || showGlobalFilter;\n    return (jsxRuntime.jsxs(core.Box, Object.assign({}, toolbarProps, { ref: (node) => {\n            if (node) {\n                topToolbarRef.current = node;\n                if (toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.ref) {\n                    toolbarProps.ref.current = node;\n                }\n            }\n        }, sx: (theme) => (Object.assign(Object.assign({ position: isFullScreen ? 'sticky' : 'relative', top: isFullScreen ? '0' : undefined }, commonToolbarStyles({ theme })), ((toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.sx) instanceof Function\n            ? toolbarProps.sx(theme)\n            : toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.sx))), children: [positionToolbarAlertBanner === 'top' && (jsxRuntime.jsx(MRT_ToolbarAlertBanner, { stackAlertBanner: stackAlertBanner, table: table })), ['both', 'top'].includes(positionToolbarDropZone !== null && positionToolbarDropZone !== void 0 ? positionToolbarDropZone : '') && (jsxRuntime.jsx(MRT_ToolbarDropZone, { table: table })), jsxRuntime.jsxs(core.Flex, { sx: {\n                    alignItems: 'flex-start',\n                    boxSizing: 'border-box',\n                    justifyContent: 'space-between',\n                    padding: '8px',\n                    position: stackAlertBanner ? 'relative' : 'absolute',\n                    right: 0,\n                    top: 0,\n                    width: '100%',\n                }, children: [enableGlobalFilter && positionGlobalFilter === 'left' && (jsxRuntime.jsx(MRT_GlobalFilterTextInput, { table: table })), (_a = renderTopToolbarCustomActions === null || renderTopToolbarCustomActions === void 0 ? void 0 : renderTopToolbarCustomActions({ table })) !== null && _a !== void 0 ? _a : jsxRuntime.jsx(\"span\", {}), enableToolbarInternalActions ? (jsxRuntime.jsxs(core.Flex, { sx: {\n                            flexWrap: 'wrap-reverse',\n                            justifyContent: 'flex-end',\n                        }, children: [enableGlobalFilter && positionGlobalFilter === 'right' && (jsxRuntime.jsx(MRT_GlobalFilterTextInput, { table: table })), jsxRuntime.jsx(MRT_ToolbarInternalButtons, { table: table })] })) : (enableGlobalFilter &&\n                        positionGlobalFilter === 'right' && (jsxRuntime.jsx(MRT_GlobalFilterTextInput, { table: table })))] }), enablePagination &&\n                ['top', 'both'].includes(positionPagination !== null && positionPagination !== void 0 ? positionPagination : '') && (jsxRuntime.jsx(core.Flex, { justify: \"end\", children: jsxRuntime.jsx(MRT_TablePagination, { table: table, position: \"top\" }) })), jsxRuntime.jsx(MRT_ProgressBar, { isTopToolbar: true, table: table })] })));\n};\n\nconst MRT_BottomToolbar = ({ table, }) => {\n    const { getState, options: { enablePagination, mantineBottomToolbarProps, positionPagination, positionToolbarAlertBanner, positionToolbarDropZone, renderBottomToolbarCustomActions, }, refs: { bottomToolbarRef }, } = table;\n    const { isFullScreen } = getState();\n    const isMobile = hooks.useMediaQuery('(max-width: 720px)');\n    const toolbarProps = mantineBottomToolbarProps instanceof Function\n        ? mantineBottomToolbarProps({ table })\n        : mantineBottomToolbarProps;\n    const stackAlertBanner = isMobile || !!renderBottomToolbarCustomActions;\n    return (jsxRuntime.jsxs(core.Box, Object.assign({}, toolbarProps, { ref: (node) => {\n            if (node) {\n                bottomToolbarRef.current = node;\n                if (toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.ref) {\n                    toolbarProps.ref.current = node;\n                }\n            }\n        }, sx: (theme) => (Object.assign(Object.assign(Object.assign({}, commonToolbarStyles({ theme })), { bottom: isFullScreen ? '0' : undefined, boxShadow: `0 1px 2px -1px ${theme.fn.rgba(theme.black, 0.1)} inset`, left: 0, position: isFullScreen ? 'fixed' : 'relative', right: 0 }), ((toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.sx) instanceof Function\n            ? toolbarProps.sx(theme)\n            : toolbarProps === null || toolbarProps === void 0 ? void 0 : toolbarProps.sx))), children: [jsxRuntime.jsx(MRT_ProgressBar, { isTopToolbar: false, table: table }), positionToolbarAlertBanner === 'bottom' && (jsxRuntime.jsx(MRT_ToolbarAlertBanner, { stackAlertBanner: stackAlertBanner, table: table })), ['both', 'bottom'].includes(positionToolbarDropZone !== null && positionToolbarDropZone !== void 0 ? positionToolbarDropZone : '') && (jsxRuntime.jsx(MRT_ToolbarDropZone, { table: table })), jsxRuntime.jsxs(core.Box, { sx: {\n                    alignItems: 'center',\n                    boxSizing: 'border-box',\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    padding: '8px',\n                    width: '100%',\n                }, children: [renderBottomToolbarCustomActions ? (renderBottomToolbarCustomActions({ table })) : (jsxRuntime.jsx(\"span\", {})), jsxRuntime.jsx(core.Box, { sx: {\n                            display: 'flex',\n                            justifyContent: 'flex-end',\n                            position: stackAlertBanner ? 'relative' : 'absolute',\n                            right: 0,\n                            top: 0,\n                        }, children: enablePagination &&\n                            ['bottom', 'both'].includes(positionPagination !== null && positionPagination !== void 0 ? positionPagination : '') && (jsxRuntime.jsx(MRT_TablePagination, { table: table, position: \"bottom\" })) })] })] })));\n};\n\nconst MRT_ColumnActionMenu = ({ header, table, }) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    const { getState, toggleAllColumnsVisible, setColumnOrder, options: { columnFilterDisplayMode, enableColumnFilters, enableColumnResizing, enableGrouping, enableHiding, enablePinning, enableSorting, enableSortingRemoval, icons: { IconArrowAutofitContent, IconBoxMultiple, IconClearAll, IconColumns, IconDotsVertical, IconEyeOff, IconFilter, IconFilterOff, IconPinned, IconPinnedOff, IconSortAscending, IconSortDescending, }, localization, mantineColumnActionsButtonProps, renderColumnActionsMenuItems, }, refs: { filterInputRefs }, setColumnSizingInfo, setShowColumnFilters, } = table;\n    const { column } = header;\n    const { columnDef } = column;\n    const { columnSizing, columnVisibility } = getState();\n    const mTableHeadCellColumnActionsButtonProps = mantineColumnActionsButtonProps instanceof Function\n        ? mantineColumnActionsButtonProps({ column, table })\n        : mantineColumnActionsButtonProps;\n    const mcTableHeadCellColumnActionsButtonProps = columnDef.mantineColumnActionsButtonProps instanceof Function\n        ? columnDef.mantineColumnActionsButtonProps({\n            column,\n            table,\n        })\n        : columnDef.mantineColumnActionsButtonProps;\n    const actionIconProps = Object.assign(Object.assign({}, mTableHeadCellColumnActionsButtonProps), mcTableHeadCellColumnActionsButtonProps);\n    const handleClearSort = () => {\n        column.clearSorting();\n    };\n    const handleSortAsc = () => {\n        column.toggleSorting(false);\n    };\n    const handleSortDesc = () => {\n        column.toggleSorting(true);\n    };\n    const handleResetColumnSize = () => {\n        setColumnSizingInfo((old) => (Object.assign(Object.assign({}, old), { isResizingColumn: false })));\n        column.resetSize();\n    };\n    const handleHideColumn = () => {\n        column.toggleVisibility(false);\n    };\n    const handlePinColumn = (pinDirection) => {\n        column.pin(pinDirection);\n    };\n    const handleGroupByColumn = () => {\n        column.toggleGrouping();\n        setColumnOrder((old) => ['mrt-row-expand', ...old]);\n    };\n    const handleClearFilter = () => {\n        column.setFilterValue('');\n    };\n    const handleFilterByColumn = () => {\n        setShowColumnFilters(true);\n        setTimeout(() => { var _a; return (_a = filterInputRefs.current[`${column.id}-0`]) === null || _a === void 0 ? void 0 : _a.focus(); }, 100);\n    };\n    const handleShowAllColumns = () => {\n        toggleAllColumnsVisible(true);\n    };\n    const internalColumnMenuItems = (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [enableSorting && column.getCanSort() && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [enableSortingRemoval !== false && (jsxRuntime.jsx(core.Menu.Item, { disabled: !column.getIsSorted(), icon: jsxRuntime.jsx(IconClearAll, {}), onClick: handleClearSort, children: localization.clearSort })), jsxRuntime.jsx(core.Menu.Item, { disabled: column.getIsSorted() === 'asc', icon: jsxRuntime.jsx(IconSortAscending, {}), onClick: handleSortAsc, children: (_a = localization.sortByColumnAsc) === null || _a === void 0 ? void 0 : _a.replace('{column}', String(columnDef.header)) }), jsxRuntime.jsx(core.Menu.Item, { icon: jsxRuntime.jsx(IconSortDescending, {}), disabled: column.getIsSorted() === 'desc', onClick: handleSortDesc, children: (_b = localization.sortByColumnDesc) === null || _b === void 0 ? void 0 : _b.replace('{column}', String(columnDef.header)) }), (enableColumnFilters || enableGrouping || enableHiding) && (jsxRuntime.jsx(core.Menu.Divider, {}, 3))] })), enableColumnFilters &&\n                columnFilterDisplayMode !== 'popover' &&\n                column.getCanFilter() && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(core.Menu.Item, { disabled: !column.getFilterValue(), icon: jsxRuntime.jsx(IconFilterOff, {}), onClick: handleClearFilter, children: localization.clearFilter }), jsxRuntime.jsx(core.Menu.Item, { icon: jsxRuntime.jsx(IconFilter, {}), onClick: handleFilterByColumn, children: (_c = localization.filterByColumn) === null || _c === void 0 ? void 0 : _c.replace('{column}', String(columnDef.header)) }), (enableGrouping || enableHiding) && jsxRuntime.jsx(core.Menu.Divider, {}, 2)] })), enableGrouping && column.getCanGroup() && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(core.Menu.Item, { icon: jsxRuntime.jsx(IconBoxMultiple, {}), onClick: handleGroupByColumn, children: (_d = localization[column.getIsGrouped() ? 'ungroupByColumn' : 'groupByColumn']) === null || _d === void 0 ? void 0 : _d.replace('{column}', String(columnDef.header)) }), enablePinning && jsxRuntime.jsx(core.Menu.Divider, {})] })), enablePinning && column.getCanPin() && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(core.Menu.Item, { disabled: column.getIsPinned() === 'left' || !column.getCanPin(), icon: jsxRuntime.jsx(IconPinned, { style: { transform: 'rotate(90deg)' } }), onClick: () => handlePinColumn('left'), children: localization.pinToLeft }), jsxRuntime.jsx(core.Menu.Item, { disabled: column.getIsPinned() === 'right' || !column.getCanPin(), icon: jsxRuntime.jsx(IconPinned, { style: { transform: 'rotate(-90deg)' } }), onClick: () => handlePinColumn('right'), children: localization.pinToRight }), jsxRuntime.jsx(core.Menu.Item, { disabled: !column.getIsPinned(), icon: jsxRuntime.jsx(IconPinnedOff, {}), onClick: () => handlePinColumn(false), children: localization.unpin }), enableHiding && jsxRuntime.jsx(core.Menu.Divider, {})] })), enableColumnResizing && column.getCanResize() && (jsxRuntime.jsx(core.Menu.Item, { disabled: !columnSizing[column.id], icon: jsxRuntime.jsx(IconArrowAutofitContent, {}), onClick: handleResetColumnSize, children: localization.resetColumnSize }, 0)), enableHiding && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(core.Menu.Item, { disabled: !column.getCanHide(), icon: jsxRuntime.jsx(IconEyeOff, {}), onClick: handleHideColumn, children: (_e = localization.hideColumn) === null || _e === void 0 ? void 0 : _e.replace('{column}', String(columnDef.header)) }, 0), jsxRuntime.jsx(core.Menu.Item, { disabled: !Object.values(columnVisibility).filter((visible) => !visible)\n                            .length, icon: jsxRuntime.jsx(IconColumns, {}), onClick: handleShowAllColumns, children: (_f = localization.showAllColumns) === null || _f === void 0 ? void 0 : _f.replace('{column}', String(columnDef.header)) }, 1)] }))] }));\n    return (jsxRuntime.jsxs(core.Menu, { closeOnItemClick: true, withinPortal: true, position: \"bottom-start\", children: [jsxRuntime.jsx(core.Tooltip, { withinPortal: true, openDelay: 1000, label: (_g = actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.title) !== null && _g !== void 0 ? _g : localization.columnActions, children: jsxRuntime.jsx(core.Menu.Target, { children: jsxRuntime.jsx(core.ActionIcon, Object.assign({ \"aria-label\": localization.columnActions, size: \"sm\" }, actionIconProps, { sx: (theme) => (Object.assign({ opacity: 0.5, transition: 'opacity 100ms', '&:hover': {\n                                opacity: 1,\n                            } }, ((actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.sx) instanceof Function\n                            ? actionIconProps.sx(theme)\n                            : actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.sx))), children: jsxRuntime.jsx(IconDotsVertical, {}) })) }) }), jsxRuntime.jsx(core.Menu.Dropdown, { children: (_k = (_j = (_h = columnDef.renderColumnActionsMenuItems) === null || _h === void 0 ? void 0 : _h.call(columnDef, {\n                    column,\n                    table,\n                    internalColumnMenuItems,\n                })) !== null && _j !== void 0 ? _j : renderColumnActionsMenuItems === null || renderColumnActionsMenuItems === void 0 ? void 0 : renderColumnActionsMenuItems({\n                    column,\n                    table,\n                    internalColumnMenuItems,\n                })) !== null && _k !== void 0 ? _k : internalColumnMenuItems })] }));\n};\n\nconst MRT_FilterRangeSlider = ({ header, table, }) => {\n    var _a;\n    const { options: { mantineFilterRangeSliderProps }, refs: { filterInputRefs }, } = table;\n    const { column } = header;\n    const { columnDef } = column;\n    const mFilterRangeSliderProps = mantineFilterRangeSliderProps instanceof Function\n        ? mantineFilterRangeSliderProps({\n            column,\n            table,\n        })\n        : mantineFilterRangeSliderProps;\n    const mcFilterRangeSliderProps = columnDef.mantineFilterRangeSliderProps instanceof Function\n        ? columnDef.mantineFilterRangeSliderProps({\n            column,\n            table,\n        })\n        : columnDef.mantineFilterRangeSliderProps;\n    const rangeSliderProps = Object.assign(Object.assign({}, mFilterRangeSliderProps), mcFilterRangeSliderProps);\n    let [min, max] = rangeSliderProps.min !== undefined && rangeSliderProps.max !== undefined\n        ? [rangeSliderProps.min, rangeSliderProps.max]\n        : (_a = column.getFacetedMinMaxValues()) !== null && _a !== void 0 ? _a : [0, 1];\n    //fix potential TanStack Table bugs where min or max is an array\n    if (Array.isArray(min))\n        min = min[0];\n    if (Array.isArray(max))\n        max = max[0];\n    if (min === null)\n        min = 0;\n    if (max === null)\n        max = 1;\n    const [filterValues, setFilterValues] = react.useState([\n        min,\n        max,\n    ]);\n    const columnFilterValue = column.getFilterValue();\n    const isMounted = react.useRef(false);\n    react.useEffect(() => {\n        if (isMounted.current) {\n            if (columnFilterValue === undefined) {\n                setFilterValues([min, max]);\n            }\n            else if (Array.isArray(columnFilterValue)) {\n                setFilterValues(columnFilterValue);\n            }\n        }\n        isMounted.current = true;\n    }, [columnFilterValue, min, max]);\n    return (jsxRuntime.jsx(core.RangeSlider, Object.assign({ min: min, max: max, onChange: (values) => {\n            setFilterValues(values);\n        }, onChangeEnd: (values) => {\n            if (Array.isArray(values)) {\n                if (values[0] <= min && values[1] >= max) {\n                    //if the user has selected the entire range, remove the filter\n                    column.setFilterValue(undefined);\n                }\n                else {\n                    column.setFilterValue(values);\n                }\n            }\n        }, value: filterValues }, rangeSliderProps, { ref: (node) => {\n            if (node) {\n                //@ts-ignore\n                filterInputRefs.current[`${column.id}-0`] = node;\n                // @ts-ignore\n                if (rangeSliderProps === null || rangeSliderProps === void 0 ? void 0 : rangeSliderProps.ref) {\n                    //@ts-ignore\n                    rangeSliderProps.ref = node;\n                }\n            }\n        }, sx: (theme) => (Object.assign({ margin: 'auto', marginTop: '16px', marginBottom: '6px', width: 'calc(100% - 8px)' }, ((rangeSliderProps === null || rangeSliderProps === void 0 ? void 0 : rangeSliderProps.sx) instanceof Function\n            ? rangeSliderProps.sx(theme)\n            : rangeSliderProps === null || rangeSliderProps === void 0 ? void 0 : rangeSliderProps.sx))) })));\n};\n\nconst MRT_TableHeadCellFilterContainer = ({ header, table, }) => {\n    var _a, _b, _c;\n    const { getState, options: { columnFilterDisplayMode, enableColumnFilterModes, columnFilterModeOptions, icons: { IconFilterCog }, localization, }, refs: { filterInputRefs }, } = table;\n    const { showColumnFilters } = getState();\n    const { column } = header;\n    const { columnDef } = column;\n    const currentFilterOption = columnDef._filterFn;\n    const allowedColumnFilterOptions = (_a = columnDef === null || columnDef === void 0 ? void 0 : columnDef.columnFilterModeOptions) !== null && _a !== void 0 ? _a : columnFilterModeOptions;\n    const showChangeModeButton = enableColumnFilterModes &&\n        columnDef.enableColumnFilterModes !== false &&\n        (allowedColumnFilterOptions === undefined ||\n            !!(allowedColumnFilterOptions === null || allowedColumnFilterOptions === void 0 ? void 0 : allowedColumnFilterOptions.length));\n    return (jsxRuntime.jsx(core.Collapse, { in: showColumnFilters || columnFilterDisplayMode === 'popover', children: jsxRuntime.jsxs(core.Flex, { direction: \"column\", children: [jsxRuntime.jsxs(core.Flex, { align: \"flex-end\", children: [columnDef.filterVariant === 'checkbox' ? (jsxRuntime.jsx(MRT_FilterCheckbox, { column: column, table: table })) : columnDef.filterVariant === 'range-slider' ? (jsxRuntime.jsx(MRT_FilterRangeSlider, { header: header, table: table })) : ['range', 'date-range'].includes((_b = columnDef.filterVariant) !== null && _b !== void 0 ? _b : '') ||\n                            ['between', 'betweenInclusive', 'inNumberRange'].includes(columnDef._filterFn) ? (jsxRuntime.jsx(MRT_FilterRangeFields, { header: header, table: table })) : (jsxRuntime.jsx(MRT_FilterTextInput, { header: header, table: table })), showChangeModeButton && (jsxRuntime.jsxs(core.Menu, { withinPortal: columnFilterDisplayMode !== 'popover', children: [jsxRuntime.jsx(core.Tooltip, { label: localization.changeFilterMode, position: \"bottom-start\", withinPortal: true, children: jsxRuntime.jsx(core.Menu.Target, { children: jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": localization.changeFilterMode, size: \"md\", sx: { transform: 'translateY(-2px)' }, children: jsxRuntime.jsx(IconFilterCog, {}) }) }) }), jsxRuntime.jsx(MRT_FilterOptionMenu, { header: header, table: table, onSelect: () => setTimeout(() => { var _a; return (_a = filterInputRefs.current[`${column.id}-0`]) === null || _a === void 0 ? void 0 : _a.focus(); }, 100) })] }))] }), showChangeModeButton ? (jsxRuntime.jsx(core.Text, { component: \"label\", color: \"dimmed\", sx: { whiteSpace: 'nowrap', marginTop: '4px', fontSize: '10px' }, children: localization.filterMode.replace('{filterType}', \n                    // @ts-ignore\n                    localization[`filter${((_c = currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.charAt(0)) === null || _c === void 0 ? void 0 : _c.toUpperCase()) +\n                        (currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.slice(1))}`]) })) : null] }) }));\n};\n\nconst MRT_TableHeadCellFilterLabel = ({ header, table, }) => {\n    var _a, _b, _c, _d;\n    const { options: { columnFilterDisplayMode, icons: { IconFilter }, localization, }, refs: { filterInputRefs }, setShowColumnFilters, } = table;\n    const { column } = header;\n    const { columnDef } = column;\n    const theme = core.useMantineTheme();\n    const filterValue = column.getFilterValue();\n    const [popoverOpened, setPopoverOpened] = react.useState(false);\n    const isFilterActive = (Array.isArray(filterValue) && filterValue.some(Boolean)) ||\n        (!!filterValue && !Array.isArray(filterValue));\n    const isRangeFilter = columnDef.filterVariant === 'range' ||\n        ['between', 'betweenInclusive', 'inNumberRange'].includes(columnDef._filterFn);\n    const currentFilterOption = columnDef._filterFn;\n    const filterTooltip = columnFilterDisplayMode === 'popover' && !isFilterActive\n        ? (_a = localization.filterByColumn) === null || _a === void 0 ? void 0 : _a.replace('{column}', String(columnDef.header))\n        : localization.filteringByColumn\n            .replace('{column}', String(columnDef.header))\n            .replace('{filterType}', \n        // @ts-ignore\n        localization[`filter${((_b = currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.charAt(0)) === null || _b === void 0 ? void 0 : _b.toUpperCase()) +\n            (currentFilterOption === null || currentFilterOption === void 0 ? void 0 : currentFilterOption.slice(1))}`])\n            .replace('{filterValue}', `\"${Array.isArray(column.getFilterValue())\n            ? column.getFilterValue().join(`\" ${isRangeFilter ? localization.and : localization.or} \"`)\n            : column.getFilterValue()}\"`)\n            .replace('\" \"', '');\n    return (jsxRuntime.jsxs(core.Popover, { onClose: () => setPopoverOpened(false), opened: popoverOpened, position: \"top\", keepMounted: columnDef.filterVariant === 'range-slider', shadow: \"xl\", width: 360, withinPortal: true, children: [jsxRuntime.jsx(core.Transition, { transition: \"scale\", mounted: columnFilterDisplayMode === 'popover' ||\n                    (!!column.getFilterValue() && !isRangeFilter) ||\n                    (isRangeFilter && // @ts-ignore\n                        (!!((_c = column.getFilterValue()) === null || _c === void 0 ? void 0 : _c[0]) || !!((_d = column.getFilterValue()) === null || _d === void 0 ? void 0 : _d[1]))), children: (styles) => (jsxRuntime.jsx(core.Box, { component: \"span\", sx: { flex: '0 0' }, style: styles, children: jsxRuntime.jsx(core.Popover.Target, { children: jsxRuntime.jsx(core.Tooltip, { disabled: popoverOpened, label: filterTooltip, multiline: true, width: filterTooltip.length > 40 ? 300 : undefined, withinPortal: true, children: jsxRuntime.jsx(core.ActionIcon, { color: isFilterActive ? getPrimaryColor(theme) : undefined, onClick: (event) => {\n                                    event.stopPropagation();\n                                    if (columnFilterDisplayMode === 'popover') {\n                                        setPopoverOpened((opened) => !opened);\n                                    }\n                                    else {\n                                        setShowColumnFilters(true);\n                                    }\n                                    setTimeout(() => {\n                                        var _a, _b;\n                                        (_a = filterInputRefs.current[`${column.id}-0`]) === null || _a === void 0 ? void 0 : _a.focus();\n                                        (_b = filterInputRefs.current[`${column.id}-0`]) === null || _b === void 0 ? void 0 : _b.select();\n                                    }, 100);\n                                }, size: \"sm\", sx: {\n                                    opacity: isFilterActive ? 1 : 0.5,\n                                    padding: '2px',\n                                    '&:hover': {\n                                        opacity: 1,\n                                    },\n                                }, children: jsxRuntime.jsx(IconFilter, {}) }) }) }) })) }), columnFilterDisplayMode === 'popover' && (jsxRuntime.jsx(core.Popover.Dropdown, { onClick: (event) => event.stopPropagation(), onKeyDown: (event) => event.key === 'Enter' && setPopoverOpened(false), children: jsxRuntime.jsx(MRT_TableHeadCellFilterContainer, { header: header, table: table }) }))] }));\n};\n\nconst MRT_TableHeadCellGrabHandle = ({ column, table, tableHeadCellRef, }) => {\n    const { getState, options: { enableColumnOrdering, mantineColumnDragHandleProps }, setColumnOrder, setDraggingColumn, setHoveredColumn, } = table;\n    const { columnDef } = column;\n    const { hoveredColumn, draggingColumn, columnOrder } = getState();\n    const mActionIconProps = mantineColumnDragHandleProps instanceof Function\n        ? mantineColumnDragHandleProps({ column, table })\n        : mantineColumnDragHandleProps;\n    const mcActionIconProps = columnDef.mantineColumnDragHandleProps instanceof Function\n        ? columnDef.mantineColumnDragHandleProps({ column, table })\n        : columnDef.mantineColumnDragHandleProps;\n    const actionIconProps = Object.assign(Object.assign({}, mActionIconProps), mcActionIconProps);\n    const handleDragStart = (event) => {\n        var _a;\n        (_a = actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.onDragStart) === null || _a === void 0 ? void 0 : _a.call(actionIconProps, event);\n        setDraggingColumn(column);\n        event.dataTransfer.setDragImage(tableHeadCellRef.current, 0, 0);\n    };\n    const handleDragEnd = (event) => {\n        var _a;\n        (_a = actionIconProps === null || actionIconProps === void 0 ? void 0 : actionIconProps.onDragEnd) === null || _a === void 0 ? void 0 : _a.call(actionIconProps, event);\n        if ((hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === 'drop-zone') {\n            column.toggleGrouping();\n        }\n        else if (enableColumnOrdering &&\n            hoveredColumn &&\n            (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) !== (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id)) {\n            setColumnOrder(reorderColumn(column, hoveredColumn, columnOrder));\n        }\n        setDraggingColumn(null);\n        setHoveredColumn(null);\n    };\n    return (jsxRuntime.jsx(MRT_GrabHandleButton, { actionIconProps: actionIconProps, onDragStart: handleDragStart, onDragEnd: handleDragEnd, table: table }));\n};\n\nconst MRT_TableHeadCellResizeHandle = ({ header, table, }) => {\n    var _a;\n    const { getState, options: { columnResizeMode }, setColumnSizingInfo, } = table;\n    const { density } = getState();\n    const { column } = header;\n    return (jsxRuntime.jsx(core.Box, { onDoubleClick: () => {\n            setColumnSizingInfo((old) => (Object.assign(Object.assign({}, old), { isResizingColumn: false })));\n            column.resetSize();\n        }, onMouseDown: header.getResizeHandler(), onTouchStart: header.getResizeHandler(), sx: (theme) => ({\n            cursor: 'col-resize',\n            marginRight: density === 'xl' ? '-24px' : density === 'md' ? '-20px' : '-14px',\n            position: 'absolute',\n            right: '4px',\n            paddingLeft: '1px',\n            paddingRight: '1px',\n            '&:active > .mantine-Divider-vertical': {\n                borderLeftColor: getPrimaryColor(theme),\n            },\n        }), style: {\n            transform: column.getIsResizing() && columnResizeMode === 'onEnd'\n                ? `translateX(${(_a = getState().columnSizingInfo.deltaOffset) !== null && _a !== void 0 ? _a : 0}px)`\n                : undefined,\n        }, children: jsxRuntime.jsx(core.Divider, { orientation: \"vertical\", size: \"lg\", sx: {\n                borderRadius: '2px',\n                borderWidth: '4px',\n                height: '24px',\n                touchAction: 'none',\n                transition: column.getIsResizing()\n                    ? undefined\n                    : 'all 100ms ease-in-out',\n                userSelect: 'none',\n                zIndex: 4,\n            } }) }));\n};\n\nconst MRT_TableHeadCellSortLabel = ({ header, table, }) => {\n    const { getState, options: { icons: { IconSortDescending, IconSortAscending, IconArrowsSort }, localization, }, } = table;\n    const { column } = header;\n    const { columnDef } = column;\n    const { sorting } = getState();\n    const theme = core.useMantineTheme();\n    const sortTooltip = column.getIsSorted()\n        ? column.getIsSorted() === 'desc'\n            ? localization.sortedByColumnDesc.replace('{column}', columnDef.header)\n            : localization.sortedByColumnAsc.replace('{column}', columnDef.header)\n        : column.getNextSortingOrder() === 'desc'\n            ? localization.sortByColumnDesc.replace('{column}', columnDef.header)\n            : localization.sortByColumnAsc.replace('{column}', columnDef.header);\n    const showIndicator = sorting.length >= 2 && column.getSortIndex() !== -1;\n    return (jsxRuntime.jsx(core.Tooltip, { withinPortal: true, label: sortTooltip, children: jsxRuntime.jsx(core.Indicator, { color: \"transparent\", disabled: !showIndicator, inline: true, label: column.getSortIndex() + 1, offset: 3, children: jsxRuntime.jsx(core.ActionIcon, { \"aria-label\": sortTooltip, color: column.getIsSorted() ? getPrimaryColor(theme) : undefined, size: \"xs\", sx: {\n                    opacity: column.getIsSorted() ? 1 : 0.5,\n                    transform: showIndicator\n                        ? 'translate(-2px, 2px) scale(0.9)'\n                        : undefined,\n                    transition: 'opacity 100ms ease-in-out',\n                    '&:hover': {\n                        opacity: 1,\n                    },\n                }, children: column.getIsSorted() === 'desc' ? (jsxRuntime.jsx(IconSortDescending, {})) : column.getIsSorted() === 'asc' ? (jsxRuntime.jsx(IconSortAscending, {})) : (jsxRuntime.jsx(IconArrowsSort, {})) }) }) }));\n};\n\nconst MRT_TableHeadCell = ({ header, table, }) => {\n    var _a, _b, _c, _d;\n    const theme = core.useMantineTheme();\n    const { getState, options: { columnFilterDisplayMode, enableColumnActions, enableColumnDragging, enableColumnOrdering, enableGrouping, enableMultiSort, layoutMode, mantineTableHeadCellProps, }, refs: { tableHeadCellRefs }, setHoveredColumn, } = table;\n    const { density, draggingColumn, grouping, hoveredColumn } = getState();\n    const { column } = header;\n    const { columnDef } = column;\n    const { columnDefType } = columnDef;\n    const mTableHeadCellProps = mantineTableHeadCellProps instanceof Function\n        ? mantineTableHeadCellProps({ column, table })\n        : mantineTableHeadCellProps;\n    const mcTableHeadCellProps = columnDef.mantineTableHeadCellProps instanceof Function\n        ? columnDef.mantineTableHeadCellProps({ column, table })\n        : columnDef.mantineTableHeadCellProps;\n    const tableCellProps = Object.assign(Object.assign({}, mTableHeadCellProps), mcTableHeadCellProps);\n    const showColumnActions = (enableColumnActions || columnDef.enableColumnActions) &&\n        columnDef.enableColumnActions !== false;\n    const showDragHandle = enableColumnDragging !== false &&\n        columnDef.enableColumnDragging !== false &&\n        (enableColumnDragging ||\n            (enableColumnOrdering && columnDef.enableColumnOrdering !== false) ||\n            (enableGrouping &&\n                columnDef.enableGrouping !== false &&\n                !grouping.includes(column.id)));\n    const headerPL = react.useMemo(() => {\n        let pl = 0;\n        if (column.getCanSort())\n            pl++;\n        if (showColumnActions)\n            pl += 1.75;\n        if (showDragHandle)\n            pl += 1.25;\n        return pl;\n    }, [showColumnActions, showDragHandle]);\n    const draggingBorder = react.useMemo(() => (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id) === column.id\n        ? `1px dashed ${theme.colors.gray[7]} !important`\n        : (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === column.id\n            ? `2px dashed ${getPrimaryColor(theme)} !important`\n            : undefined, [draggingColumn, hoveredColumn]);\n    const draggingBorders = draggingBorder\n        ? {\n            borderLeft: draggingBorder,\n            borderRight: draggingBorder,\n            borderTop: draggingBorder,\n        }\n        : undefined;\n    const handleDragEnter = (_e) => {\n        if (enableGrouping && (hoveredColumn === null || hoveredColumn === void 0 ? void 0 : hoveredColumn.id) === 'drop-zone') {\n            setHoveredColumn(null);\n        }\n        if (enableColumnOrdering && draggingColumn && columnDefType !== 'group') {\n            setHoveredColumn(columnDef.enableColumnOrdering !== false ? column : null);\n        }\n    };\n    const headerElement = (columnDef === null || columnDef === void 0 ? void 0 : columnDef.Header) instanceof Function\n        ? (_a = columnDef === null || columnDef === void 0 ? void 0 : columnDef.Header) === null || _a === void 0 ? void 0 : _a.call(columnDef, {\n            column,\n            header,\n            table,\n        })\n        : (_b = columnDef === null || columnDef === void 0 ? void 0 : columnDef.Header) !== null && _b !== void 0 ? _b : columnDef.header;\n    return (jsxRuntime.jsxs(core.Box, Object.assign({ component: \"th\", align: columnDefType === 'group' ? 'center' : 'left', colSpan: header.colSpan, onDragEnter: handleDragEnter, ref: (node) => {\n            if (node) {\n                tableHeadCellRefs.current[column.id] = node;\n            }\n        } }, tableCellProps, { sx: (theme) => (Object.assign(Object.assign({ flexDirection: layoutMode === 'grid' ? 'column' : undefined, fontWeight: 'bold', overflow: 'visible', padding: density === 'xl' ? '23px' : density === 'md' ? '16px' : '10px', userSelect: enableMultiSort && column.getCanSort() ? 'none' : undefined, verticalAlign: 'top', zIndex: column.getIsResizing() || (draggingColumn === null || draggingColumn === void 0 ? void 0 : draggingColumn.id) === column.id\n                ? 3\n                : column.getIsPinned() && columnDefType !== 'group'\n                    ? 2\n                    : 1, '&:hover .mantine-ActionIcon-root': {\n                opacity: 1,\n            } }, getCommonCellStyles({\n            column,\n            header,\n            table,\n            tableCellProps,\n            theme,\n        })), draggingBorders)), children: [header.isPlaceholder ? null : (jsxRuntime.jsxs(core.Flex, { className: \"mantine-TableHeadCell-Content\", sx: {\n                    alignItems: 'flex-start',\n                    flexDirection: (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) === 'right' ? 'row-reverse' : 'row',\n                    justifyContent: columnDefType === 'group' || (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) === 'center'\n                        ? 'center'\n                        : column.getCanResize()\n                            ? 'space-between'\n                            : 'flex-start',\n                    position: 'relative',\n                    width: '100%',\n                }, children: [jsxRuntime.jsxs(core.Flex, { className: \"mantine-TableHeadCell-Content-Labels\", onClick: column.getToggleSortingHandler(), sx: {\n                            alignItems: 'center',\n                            cursor: column.getCanSort() && columnDefType !== 'group'\n                                ? 'pointer'\n                                : undefined,\n                            flexDirection: (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) === 'right' ? 'row-reverse' : 'row',\n                            overflow: columnDefType === 'data' ? 'hidden' : undefined,\n                            paddingLeft: (tableCellProps === null || tableCellProps === void 0 ? void 0 : tableCellProps.align) === 'center'\n                                ? `${headerPL}rem`\n                                : undefined,\n                        }, children: [jsxRuntime.jsx(core.Flex, { className: \"mantine-TableHeadCell-Content-Wrapper\", sx: {\n                                    overflow: columnDefType === 'data' ? 'hidden' : undefined,\n                                    textOverflow: 'ellipsis',\n                                    whiteSpace: ((_d = (_c = columnDef.header) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) < 20 ? 'nowrap' : 'normal',\n                                }, title: columnDefType === 'data' ? columnDef.header : undefined, children: headerElement }), column.getCanSort() && (jsxRuntime.jsx(MRT_TableHeadCellSortLabel, { header: header, table: table })), column.getCanFilter() && (jsxRuntime.jsx(MRT_TableHeadCellFilterLabel, { header: header, table: table }))] }), columnDefType !== 'group' && (jsxRuntime.jsxs(core.Flex, { className: \"mantine-TableHeadCell-Content-Actions\", sx: {\n                            alignItems: 'center',\n                            alignSelf: 'center',\n                            whiteSpace: 'nowrap',\n                        }, children: [showDragHandle && (jsxRuntime.jsx(MRT_TableHeadCellGrabHandle, { column: column, table: table, tableHeadCellRef: {\n                                    current: tableHeadCellRefs.current[column.id],\n                                } })), showColumnActions && (jsxRuntime.jsx(MRT_ColumnActionMenu, { header: header, table: table }))] })), column.getCanResize() && (jsxRuntime.jsx(MRT_TableHeadCellResizeHandle, { header: header, table: table }))] })), columnFilterDisplayMode === 'subheader' && column.getCanFilter() && (jsxRuntime.jsx(MRT_TableHeadCellFilterContainer, { header: header, table: table }))] })));\n};\n\nconst MRT_TableHeadRow = ({ headerGroup, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, }) => {\n    const { getState, options: { enableStickyHeader, layoutMode, mantineTableHeadRowProps }, } = table;\n    const { isFullScreen } = getState();\n    const tableRowProps = mantineTableHeadRowProps instanceof Function\n        ? mantineTableHeadRowProps({ headerGroup, table })\n        : mantineTableHeadRowProps;\n    const stickyHeader = enableStickyHeader || isFullScreen;\n    return (jsxRuntime.jsxs(core.Box, Object.assign({ component: \"tr\" }, tableRowProps, { sx: (theme) => (Object.assign(Object.assign({ backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white, boxShadow: `0 4px 8px ${theme.fn.rgba(theme.black, 0.1)}`, display: layoutMode === 'grid' ? 'flex' : 'table-row', top: stickyHeader ? 0 : undefined }, ((tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx) instanceof Function\n            ? tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx(theme)\n            : tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx)), { position: stickyHeader ? 'sticky' : undefined })), children: [virtualPaddingLeft ? (jsxRuntime.jsx(\"th\", { style: { display: 'flex', width: virtualPaddingLeft } })) : null, (virtualColumns !== null && virtualColumns !== void 0 ? virtualColumns : headerGroup.headers).map((headerOrVirtualHeader) => {\n                const header = virtualColumns\n                    ? headerGroup.headers[headerOrVirtualHeader.index]\n                    : headerOrVirtualHeader;\n                return (jsxRuntime.jsx(MRT_TableHeadCell, { header: header, table: table }, header.id));\n            }), virtualPaddingRight ? (jsxRuntime.jsx(\"th\", { style: { display: 'flex', width: virtualPaddingRight } })) : null] })));\n};\n\nconst MRT_TableHead = ({ table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, }) => {\n    const { getHeaderGroups, getSelectedRowModel, getState, options: { enableStickyHeader, layoutMode, mantineTableHeadProps, positionToolbarAlertBanner, }, } = table;\n    const { isFullScreen, showAlertBanner } = getState();\n    const tableHeadProps = mantineTableHeadProps instanceof Function\n        ? mantineTableHeadProps({ table })\n        : mantineTableHeadProps;\n    const stickyHeader = enableStickyHeader || isFullScreen;\n    return (jsxRuntime.jsx(core.Box, Object.assign({ component: \"thead\" }, tableHeadProps, { sx: (theme) => (Object.assign({ display: layoutMode === 'grid' ? 'grid' : 'table-row-group', position: stickyHeader && layoutMode === 'grid' ? 'sticky' : 'relative', opacity: 0.97, top: stickyHeader ? 0 : undefined, zIndex: stickyHeader ? 2 : undefined }, ((tableHeadProps === null || tableHeadProps === void 0 ? void 0 : tableHeadProps.sx) instanceof Function\n            ? tableHeadProps === null || tableHeadProps === void 0 ? void 0 : tableHeadProps.sx(theme)\n            : tableHeadProps === null || tableHeadProps === void 0 ? void 0 : tableHeadProps.sx))), children: positionToolbarAlertBanner === 'head-overlay' &&\n            (showAlertBanner || getSelectedRowModel().rows.length > 0) ? (jsxRuntime.jsx(\"tr\", { style: { display: layoutMode === 'grid' ? 'grid' : 'table-row' }, children: jsxRuntime.jsx(\"th\", { colSpan: table.getVisibleLeafColumns().length, style: {\n                    display: layoutMode === 'grid' ? 'grid' : 'table-cell',\n                    padding: 0,\n                }, children: jsxRuntime.jsx(MRT_ToolbarAlertBanner, { table: table }) }) })) : (getHeaderGroups().map((headerGroup) => (jsxRuntime.jsx(MRT_TableHeadRow, { headerGroup: headerGroup, table: table, virtualColumns: virtualColumns, virtualPaddingLeft: virtualPaddingLeft, virtualPaddingRight: virtualPaddingRight }, headerGroup.id)))) })));\n};\n\nconst MRT_TableFooterCell = ({ footer, table, }) => {\n    var _a, _b, _c;\n    const { options: { layoutMode, mantineTableFooterCellProps }, } = table;\n    const { column } = footer;\n    const { columnDef } = column;\n    const { columnDefType } = columnDef;\n    const mTableFooterCellProps = mantineTableFooterCellProps instanceof Function\n        ? mantineTableFooterCellProps({ column, table })\n        : mantineTableFooterCellProps;\n    const mcTableFooterCellProps = columnDef.mantineTableFooterCellProps instanceof Function\n        ? columnDef.mantineTableFooterCellProps({ column, table })\n        : columnDef.mantineTableFooterCellProps;\n    const tableCellProps = Object.assign(Object.assign({}, mTableFooterCellProps), mcTableFooterCellProps);\n    return (jsxRuntime.jsx(core.Box, Object.assign({ component: \"th\", align: columnDefType === 'group' ? 'center' : 'left', colSpan: footer.colSpan }, tableCellProps, { sx: (theme) => (Object.assign({ display: layoutMode === 'grid' ? 'grid' : 'table-cell', fontWeight: 'bold', justifyContent: columnDefType === 'group' ? 'center' : undefined, padding: '8px', verticalAlign: 'top', zIndex: column.getIsPinned() && columnDefType !== 'group' ? 2 : 1 }, getCommonCellStyles({\n            column,\n            table,\n            theme,\n            tableCellProps,\n        }))), children: jsxRuntime.jsx(jsxRuntime.Fragment, { children: footer.isPlaceholder\n                ? null\n                : (_c = (_b = (columnDef.Footer instanceof Function\n                    ? (_a = columnDef.Footer) === null || _a === void 0 ? void 0 : _a.call(columnDef, {\n                        column,\n                        footer,\n                        table,\n                    })\n                    : columnDef.Footer)) !== null && _b !== void 0 ? _b : columnDef.footer) !== null && _c !== void 0 ? _c : null }) })));\n};\n\nconst MRT_TableFooterRow = ({ footerGroup, table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, }) => {\n    var _a;\n    const { options: { layoutMode, mantineTableFooterRowProps }, } = table;\n    // if no content in row, skip row\n    if (!((_a = footerGroup.headers) === null || _a === void 0 ? void 0 : _a.some((header) => (typeof header.column.columnDef.footer === 'string' &&\n        !!header.column.columnDef.footer) ||\n        header.column.columnDef.Footer)))\n        return null;\n    const tableRowProps = mantineTableFooterRowProps instanceof Function\n        ? mantineTableFooterRowProps({ footerGroup, table })\n        : mantineTableFooterRowProps;\n    return (jsxRuntime.jsxs(core.Box, Object.assign({ component: \"tr\" }, tableRowProps, { sx: (theme) => (Object.assign({ backgroundColor: theme.fn.lighten(theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white, 0.06), display: layoutMode === 'grid' ? 'flex' : 'table-row', width: '100%' }, ((tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx) instanceof Function\n            ? tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx(theme)\n            : tableRowProps === null || tableRowProps === void 0 ? void 0 : tableRowProps.sx))), children: [virtualPaddingLeft ? (jsxRuntime.jsx(\"th\", { style: { display: 'flex', width: virtualPaddingLeft } })) : null, (virtualColumns !== null && virtualColumns !== void 0 ? virtualColumns : footerGroup.headers).map((footerOrVirtualFooter) => {\n                const footer = virtualColumns\n                    ? footerGroup.headers[footerOrVirtualFooter.index]\n                    : footerOrVirtualFooter;\n                return (jsxRuntime.jsx(MRT_TableFooterCell, { footer: footer, table: table }, footer.id));\n            }), virtualPaddingRight ? (jsxRuntime.jsx(\"th\", { style: { display: 'flex', width: virtualPaddingRight } })) : null] })));\n};\n\nconst MRT_TableFooter = ({ table, virtualColumns, virtualPaddingLeft, virtualPaddingRight, }) => {\n    const { getFooterGroups, getState, options: { enableStickyFooter, layoutMode, mantineTableFooterProps }, } = table;\n    const { isFullScreen } = getState();\n    const tableFooterProps = mantineTableFooterProps instanceof Function\n        ? mantineTableFooterProps({ table })\n        : mantineTableFooterProps;\n    const stickFooter = (isFullScreen || enableStickyFooter) && enableStickyFooter !== false;\n    return (jsxRuntime.jsx(core.Box, Object.assign({ component: \"tfoot\" }, tableFooterProps, { sx: (theme) => (Object.assign({ bottom: stickFooter ? 0 : undefined, display: layoutMode === 'grid' ? 'grid' : 'table-row-group', opacity: stickFooter ? 0.97 : undefined, outline: stickFooter\n                ? theme.colorScheme === 'light'\n                    ? `1px solid ${theme.colors.gray[3]}`\n                    : `1px solid ${theme.colors.gray[7]}`\n                : undefined, position: stickFooter ? 'sticky' : undefined, zIndex: stickFooter ? 1 : undefined }, ((tableFooterProps === null || tableFooterProps === void 0 ? void 0 : tableFooterProps.sx) instanceof Function\n            ? tableFooterProps === null || tableFooterProps === void 0 ? void 0 : tableFooterProps.sx(theme)\n            : tableFooterProps === null || tableFooterProps === void 0 ? void 0 : tableFooterProps.sx))), children: getFooterGroups().map((footerGroup) => (jsxRuntime.jsx(MRT_TableFooterRow, { footerGroup: footerGroup, table: table, virtualColumns: virtualColumns, virtualPaddingLeft: virtualPaddingLeft, virtualPaddingRight: virtualPaddingRight }, footerGroup.id))) })));\n};\n\nconst MRT_Table = ({ table, }) => {\n    var _a, _b, _c, _d;\n    const { getFlatHeaders, getState, options: { columnVirtualizerInstanceRef, columnVirtualizerProps, columns, enableColumnResizing, enableColumnVirtualization, enablePinning, enableTableFooter, enableTableHead, layoutMode, mantineTableProps, memoMode, }, refs: { tableContainerRef }, } = table;\n    const { columnPinning, columnSizing, columnSizingInfo, columnVisibility, density, } = getState();\n    const tableProps = mantineTableProps instanceof Function\n        ? mantineTableProps({ table })\n        : mantineTableProps;\n    const vProps = columnVirtualizerProps instanceof Function\n        ? columnVirtualizerProps({ table })\n        : columnVirtualizerProps;\n    const columnSizeVars = react.useMemo(() => {\n        const headers = getFlatHeaders();\n        const colSizes = {};\n        for (let i = 0; i < headers.length; i++) {\n            const header = headers[i];\n            const colSize = header.getSize();\n            colSizes[`--header-${parseCSSVarId(header.id)}-size`] = colSize;\n            colSizes[`--col-${parseCSSVarId(header.column.id)}-size`] = colSize;\n        }\n        return colSizes;\n    }, [columns, columnSizing, columnSizingInfo, columnVisibility]);\n    //get first 16 column widths and average them\n    const averageColumnWidth = react.useMemo(() => {\n        var _a, _b, _c, _d;\n        if (!enableColumnVirtualization)\n            return 0;\n        const columnsWidths = (_d = (_c = (_b = (_a = table\n            .getRowModel()\n            .rows[0]) === null || _a === void 0 ? void 0 : _a.getCenterVisibleCells()) === null || _b === void 0 ? void 0 : _b.slice(0, 16)) === null || _c === void 0 ? void 0 : _c.map((cell) => cell.column.getSize() * 1.2)) !== null && _d !== void 0 ? _d : [];\n        return columnsWidths.reduce((a, b) => a + b, 0) / columnsWidths.length;\n    }, [table.getRowModel().rows, columnPinning, columnVisibility]);\n    const [leftPinnedIndexes, rightPinnedIndexes] = react.useMemo(() => enableColumnVirtualization && enablePinning\n        ? [\n            table.getLeftLeafColumns().map((c) => c.getPinnedIndex()),\n            table\n                .getRightLeafColumns()\n                .map((c) => table.getVisibleLeafColumns().length - c.getPinnedIndex() - 1),\n        ]\n        : [[], []], [columnPinning, enableColumnVirtualization, enablePinning]);\n    const columnVirtualizer = enableColumnVirtualization\n        ? reactVirtual.useVirtualizer(Object.assign({ count: table.getVisibleLeafColumns().length, estimateSize: () => averageColumnWidth, getScrollElement: () => tableContainerRef.current, horizontal: true, overscan: 3, rangeExtractor: react.useCallback((range) => [\n                ...new Set([\n                    ...leftPinnedIndexes,\n                    ...reactVirtual.defaultRangeExtractor(range),\n                    ...rightPinnedIndexes,\n                ]),\n            ], [leftPinnedIndexes, rightPinnedIndexes]) }, vProps))\n        : undefined;\n    if (columnVirtualizerInstanceRef && columnVirtualizer) {\n        columnVirtualizerInstanceRef.current = columnVirtualizer;\n    }\n    const virtualColumns = columnVirtualizer\n        ? columnVirtualizer.getVirtualItems()\n        : undefined;\n    let virtualPaddingLeft;\n    let virtualPaddingRight;\n    if (columnVirtualizer && (virtualColumns === null || virtualColumns === void 0 ? void 0 : virtualColumns.length)) {\n        virtualPaddingLeft = (_b = (_a = virtualColumns[leftPinnedIndexes.length]) === null || _a === void 0 ? void 0 : _a.start) !== null && _b !== void 0 ? _b : 0;\n        virtualPaddingRight =\n            columnVirtualizer.getTotalSize() -\n                ((_d = (_c = virtualColumns[virtualColumns.length - 1 - rightPinnedIndexes.length]) === null || _c === void 0 ? void 0 : _c.end) !== null && _d !== void 0 ? _d : 0);\n    }\n    const props = {\n        columnVirtualizer,\n        enableHover: tableProps === null || tableProps === void 0 ? void 0 : tableProps.highlightOnHover,\n        isStriped: tableProps === null || tableProps === void 0 ? void 0 : tableProps.striped,\n        table,\n        virtualColumns,\n        virtualPaddingLeft,\n        virtualPaddingRight,\n    };\n    return (jsxRuntime.jsxs(core.Table, Object.assign({ highlightOnHover: true, horizontalSpacing: density, verticalSpacing: density }, tableProps, { sx: (theme) => (Object.assign({ display: layoutMode === 'grid' ? 'grid' : 'table', tableLayout: layoutMode !== 'grid' && enableColumnResizing ? 'fixed' : undefined, '& tr:first-of-type td': {\n                borderTop: `1px solid ${theme.colors.gray[theme.colorScheme === 'dark' ? 8 : 3]}`,\n            }, '& tr:last-of-type td': {\n                borderBottom: `1px solid ${theme.colors.gray[theme.colorScheme === 'dark' ? 8 : 3]}`,\n            } }, ((tableProps === null || tableProps === void 0 ? void 0 : tableProps.sx) instanceof Function\n            ? tableProps.sx(theme)\n            : tableProps === null || tableProps === void 0 ? void 0 : tableProps.sx))), style: Object.assign(Object.assign({}, columnSizeVars), tableProps === null || tableProps === void 0 ? void 0 : tableProps.style), children: [enableTableHead && jsxRuntime.jsx(MRT_TableHead, Object.assign({}, props)), memoMode === 'table-body' || columnSizingInfo.isResizingColumn ? (jsxRuntime.jsx(Memo_MRT_TableBody, Object.assign({}, props))) : (jsxRuntime.jsx(MRT_TableBody, Object.assign({}, props))), enableTableFooter && jsxRuntime.jsx(MRT_TableFooter, Object.assign({}, props))] })));\n};\n\nconst MRT_EditRowModal = ({ open, table, }) => {\n    var _a;\n    const { getState, options: { onEditingRowCancel, onCreatingRowCancel, renderEditRowModalContent, renderCreateRowModalContent, mantineCreateRowModalProps, mantineEditRowModalProps, }, setEditingRow, setCreatingRow, } = table;\n    const { creatingRow, editingRow } = getState();\n    const row = (creatingRow !== null && creatingRow !== void 0 ? creatingRow : editingRow);\n    const createModalProps = mantineCreateRowModalProps instanceof Function\n        ? mantineCreateRowModalProps({ row, table })\n        : mantineCreateRowModalProps;\n    const editModalProps = mantineEditRowModalProps instanceof Function\n        ? mantineEditRowModalProps({ row, table })\n        : mantineEditRowModalProps;\n    const modalProps = Object.assign(Object.assign({}, editModalProps), (creatingRow && createModalProps));\n    const internalEditComponents = row\n        .getAllCells()\n        .filter((cell) => cell.column.columnDef.columnDefType === 'data')\n        .map((cell) => (jsxRuntime.jsx(MRT_EditCellTextInput, { cell: cell, table: table }, cell.id)));\n    const handleCancel = () => {\n        var _a;\n        if (creatingRow) {\n            onCreatingRowCancel === null || onCreatingRowCancel === void 0 ? void 0 : onCreatingRowCancel({ row, table });\n            setCreatingRow(null);\n        }\n        else {\n            onEditingRowCancel === null || onEditingRowCancel === void 0 ? void 0 : onEditingRowCancel({ row, table });\n            setEditingRow(null);\n        }\n        row._valuesCache = {}; //reset values cache\n        (_a = modalProps.onClose) === null || _a === void 0 ? void 0 : _a.call(modalProps);\n    };\n    return (react.createElement(core.Modal, Object.assign({ opened: open, withCloseButton: false }, modalProps, { onClose: handleCancel, key: row.id }), (_a = ((creatingRow &&\n        (renderCreateRowModalContent === null || renderCreateRowModalContent === void 0 ? void 0 : renderCreateRowModalContent({\n            row,\n            table,\n            internalEditComponents,\n        }))) ||\n        (renderEditRowModalContent === null || renderEditRowModalContent === void 0 ? void 0 : renderEditRowModalContent({\n            row,\n            table,\n            internalEditComponents,\n        })))) !== null && _a !== void 0 ? _a : (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(\"form\", { onSubmit: (e) => e.preventDefault(), children: jsxRuntime.jsx(core.Stack, { sx: {\n                        gap: '24px',\n                        paddingTop: '16px',\n                        width: '100%',\n                    }, children: internalEditComponents }) }), jsxRuntime.jsx(core.Flex, { sx: { paddingTop: '24px', justifyContent: 'flex-end' }, children: jsxRuntime.jsx(MRT_EditActionButtons, { row: row, table: table, variant: \"text\" }) })] }))));\n};\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? react.useLayoutEffect : react.useEffect;\nconst MRT_TableContainer = ({ table, }) => {\n    const { getState, options: { createDisplayMode, editDisplayMode, enableStickyHeader, mantineLoadingOverlayProps, mantineTableContainerProps, }, refs: { tableContainerRef, bottomToolbarRef, topToolbarRef }, } = table;\n    const { isFullScreen, isLoading, showLoadingOverlay, creatingRow, editingRow, } = getState();\n    const [totalToolbarHeight, setTotalToolbarHeight] = react.useState(0);\n    const tableContainerProps = mantineTableContainerProps instanceof Function\n        ? mantineTableContainerProps({ table })\n        : mantineTableContainerProps;\n    const loadingOverlayProps = mantineLoadingOverlayProps instanceof Function\n        ? mantineLoadingOverlayProps({ table })\n        : mantineLoadingOverlayProps;\n    useIsomorphicLayoutEffect(() => {\n        var _a, _b, _c, _d;\n        const topToolbarHeight = typeof document !== 'undefined'\n            ? (_b = (_a = topToolbarRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) !== null && _b !== void 0 ? _b : 0\n            : 0;\n        const bottomToolbarHeight = typeof document !== 'undefined'\n            ? (_d = (_c = bottomToolbarRef === null || bottomToolbarRef === void 0 ? void 0 : bottomToolbarRef.current) === null || _c === void 0 ? void 0 : _c.offsetHeight) !== null && _d !== void 0 ? _d : 0\n            : 0;\n        setTotalToolbarHeight(topToolbarHeight + bottomToolbarHeight);\n    });\n    const createModalOpen = createDisplayMode === 'modal' && creatingRow;\n    const editModalOpen = editDisplayMode === 'modal' && editingRow;\n    return (jsxRuntime.jsxs(core.Box, Object.assign({}, tableContainerProps, { ref: (node) => {\n            if (node) {\n                tableContainerRef.current = node;\n                if (tableContainerProps === null || tableContainerProps === void 0 ? void 0 : tableContainerProps.ref) {\n                    //@ts-ignore\n                    tableContainerProps.ref.current = node;\n                }\n            }\n        }, sx: (theme) => (Object.assign({ maxWidth: '100%', maxHeight: enableStickyHeader\n                ? `clamp(350px, calc(100vh - ${totalToolbarHeight}px), 9999px)`\n                : undefined, overflow: 'auto', position: 'relative' }, ((tableContainerProps === null || tableContainerProps === void 0 ? void 0 : tableContainerProps.sx) instanceof Function\n            ? tableContainerProps.sx(theme)\n            : tableContainerProps === null || tableContainerProps === void 0 ? void 0 : tableContainerProps.sx))), style: Object.assign({ maxHeight: isFullScreen\n                ? `calc(100vh - ${totalToolbarHeight}px)`\n                : undefined }, tableContainerProps === null || tableContainerProps === void 0 ? void 0 : tableContainerProps.style), children: [jsxRuntime.jsx(core.LoadingOverlay, Object.assign({ visible: isLoading || showLoadingOverlay }, loadingOverlayProps)), jsxRuntime.jsx(MRT_Table, { table: table }), (createModalOpen || editModalOpen) && (jsxRuntime.jsx(MRT_EditRowModal, { open: true, table: table }))] })));\n};\n\nconst MRT_TablePaper = ({ table, }) => {\n    const { getState, options: { enableBottomToolbar, enableTopToolbar, mantinePaperProps, renderBottomToolbar, renderTopToolbar, }, refs: { tablePaperRef }, } = table;\n    const { isFullScreen } = getState();\n    const tablePaperProps = mantinePaperProps instanceof Function\n        ? mantinePaperProps({ table })\n        : mantinePaperProps;\n    return (jsxRuntime.jsxs(core.Paper, Object.assign({ shadow: \"xs\", withBorder: true }, tablePaperProps, { ref: (ref) => {\n            tablePaperRef.current = ref;\n            if (tablePaperProps === null || tablePaperProps === void 0 ? void 0 : tablePaperProps.ref) {\n                tablePaperProps.ref.current = ref;\n            }\n        }, sx: (theme) => (Object.assign({ overflow: 'hidden', transition: 'all 100ms ease-in-out' }, ((tablePaperProps === null || tablePaperProps === void 0 ? void 0 : tablePaperProps.sx) instanceof Function\n            ? tablePaperProps === null || tablePaperProps === void 0 ? void 0 : tablePaperProps.sx(theme)\n            : tablePaperProps === null || tablePaperProps === void 0 ? void 0 : tablePaperProps.sx))), style: Object.assign(Object.assign({}, (isFullScreen\n            ? {\n                bottom: 0,\n                height: '100vh',\n                left: 0,\n                margin: 0,\n                maxHeight: '100vh',\n                maxWidth: '100vw',\n                padding: 0,\n                position: 'fixed',\n                right: 0,\n                top: 0,\n                width: '100vw',\n                zIndex: 100,\n            }\n            : {})), tablePaperProps === null || tablePaperProps === void 0 ? void 0 : tablePaperProps.style), children: [enableTopToolbar &&\n                (renderTopToolbar instanceof Function\n                    ? renderTopToolbar({ table })\n                    : renderTopToolbar !== null && renderTopToolbar !== void 0 ? renderTopToolbar : jsxRuntime.jsx(MRT_TopToolbar, { table: table })), jsxRuntime.jsx(MRT_TableContainer, { table: table }), enableBottomToolbar &&\n                (renderBottomToolbar instanceof Function\n                    ? renderBottomToolbar({ table })\n                    : renderBottomToolbar !== null && renderBottomToolbar !== void 0 ? renderBottomToolbar : jsxRuntime.jsx(MRT_BottomToolbar, { table: table }))] })));\n};\n\nconst isTableInstanceProp = (props) => props.table !== undefined;\nconst MantineReactTable = (props) => {\n    let table;\n    if (isTableInstanceProp(props)) {\n        table = props.table;\n    }\n    else {\n        table = useMantineReactTable(props);\n    }\n    return jsxRuntime.jsx(MRT_TablePaper, { table: table });\n};\n\nexports.MRT_AggregationFns = MRT_AggregationFns;\nexports.MRT_BottomToolbar = MRT_BottomToolbar;\nexports.MRT_ColumnActionMenu = MRT_ColumnActionMenu;\nexports.MRT_ColumnPinningButtons = MRT_ColumnPinningButtons;\nexports.MRT_CopyButton = MRT_CopyButton;\nexports.MRT_DefaultColumn = MRT_DefaultColumn;\nexports.MRT_DefaultDisplayColumn = MRT_DefaultDisplayColumn;\nexports.MRT_EditActionButtons = MRT_EditActionButtons;\nexports.MRT_EditCellTextInput = MRT_EditCellTextInput;\nexports.MRT_EditRowModal = MRT_EditRowModal;\nexports.MRT_ExpandAllButton = MRT_ExpandAllButton;\nexports.MRT_ExpandButton = MRT_ExpandButton;\nexports.MRT_FilterCheckbox = MRT_FilterCheckbox;\nexports.MRT_FilterFns = MRT_FilterFns;\nexports.MRT_FilterOptionMenu = MRT_FilterOptionMenu;\nexports.MRT_FilterRangeFields = MRT_FilterRangeFields;\nexports.MRT_FilterTextInput = MRT_FilterTextInput;\nexports.MRT_GlobalFilterTextInput = MRT_GlobalFilterTextInput;\nexports.MRT_GrabHandleButton = MRT_GrabHandleButton;\nexports.MRT_ProgressBar = MRT_ProgressBar;\nexports.MRT_RowActionMenu = MRT_RowActionMenu;\nexports.MRT_SelectCheckbox = MRT_SelectCheckbox;\nexports.MRT_ShowHideColumnsButton = MRT_ShowHideColumnsButton;\nexports.MRT_ShowHideColumnsMenu = MRT_ShowHideColumnsMenu;\nexports.MRT_ShowHideColumnsMenuItems = MRT_ShowHideColumnsMenuItems;\nexports.MRT_SortingFns = MRT_SortingFns;\nexports.MRT_Table = MRT_Table;\nexports.MRT_TableBody = MRT_TableBody;\nexports.MRT_TableBodyCell = MRT_TableBodyCell;\nexports.MRT_TableBodyCellValue = MRT_TableBodyCellValue;\nexports.MRT_TableBodyRow = MRT_TableBodyRow;\nexports.MRT_TableBodyRowGrabHandle = MRT_TableBodyRowGrabHandle;\nexports.MRT_TableContainer = MRT_TableContainer;\nexports.MRT_TableDetailPanel = MRT_TableDetailPanel;\nexports.MRT_TableFooter = MRT_TableFooter;\nexports.MRT_TableFooterCell = MRT_TableFooterCell;\nexports.MRT_TableFooterRow = MRT_TableFooterRow;\nexports.MRT_TableHead = MRT_TableHead;\nexports.MRT_TableHeadCell = MRT_TableHeadCell;\nexports.MRT_TableHeadCellFilterContainer = MRT_TableHeadCellFilterContainer;\nexports.MRT_TableHeadCellFilterLabel = MRT_TableHeadCellFilterLabel;\nexports.MRT_TableHeadCellGrabHandle = MRT_TableHeadCellGrabHandle;\nexports.MRT_TableHeadCellResizeHandle = MRT_TableHeadCellResizeHandle;\nexports.MRT_TableHeadCellSortLabel = MRT_TableHeadCellSortLabel;\nexports.MRT_TableHeadRow = MRT_TableHeadRow;\nexports.MRT_TablePagination = MRT_TablePagination;\nexports.MRT_TablePaper = MRT_TablePaper;\nexports.MRT_ToggleDensePaddingButton = MRT_ToggleDensePaddingButton;\nexports.MRT_ToggleFiltersButton = MRT_ToggleFiltersButton;\nexports.MRT_ToggleFullScreenButton = MRT_ToggleFullScreenButton;\nexports.MRT_ToggleGlobalFilterButton = MRT_ToggleGlobalFilterButton;\nexports.MRT_ToggleRowActionMenuButton = MRT_ToggleRowActionMenuButton;\nexports.MRT_ToolbarAlertBanner = MRT_ToolbarAlertBanner;\nexports.MRT_ToolbarDropZone = MRT_ToolbarDropZone;\nexports.MRT_ToolbarInternalButtons = MRT_ToolbarInternalButtons;\nexports.MRT_TopToolbar = MRT_TopToolbar;\nexports.MantineReactTable = MantineReactTable;\nexports.Memo_MRT_TableBody = Memo_MRT_TableBody;\nexports.Memo_MRT_TableBodyCell = Memo_MRT_TableBodyCell;\nexports.Memo_MRT_TableBodyRow = Memo_MRT_TableBodyRow;\nexports.commonToolbarStyles = commonToolbarStyles;\nexports.createRow = createRow;\nexports.flexRender = flexRender;\nexports.getAllLeafColumnDefs = getAllLeafColumnDefs;\nexports.getCanRankRows = getCanRankRows;\nexports.getColumnId = getColumnId;\nexports.getCommonCellStyles = getCommonCellStyles;\nexports.getDefaultColumnFilterFn = getDefaultColumnFilterFn;\nexports.getDefaultColumnOrderIds = getDefaultColumnOrderIds;\nexports.getIsFirstColumn = getIsFirstColumn;\nexports.getIsFirstRightPinnedColumn = getIsFirstRightPinnedColumn;\nexports.getIsLastColumn = getIsLastColumn;\nexports.getIsLastLeftPinnedColumn = getIsLastLeftPinnedColumn;\nexports.getLeadingDisplayColumnIds = getLeadingDisplayColumnIds;\nexports.getPrimaryColor = getPrimaryColor;\nexports.getPrimaryShade = getPrimaryShade;\nexports.getTotalRight = getTotalRight;\nexports.getTrailingDisplayColumnIds = getTrailingDisplayColumnIds;\nexports.mrtFilterOptions = mrtFilterOptions;\nexports.parseCSSVarId = parseCSSVarId;\nexports.prepareColumns = prepareColumns;\nexports.rankGlobalFuzzy = rankGlobalFuzzy;\nexports.reorderColumn = reorderColumn;\nexports.showExpandColumn = showExpandColumn;\nexports.useMantineReactTable = useMantineReactTable;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mantine-react-table/dist/cjs/index.js\n");

/***/ })

};
;