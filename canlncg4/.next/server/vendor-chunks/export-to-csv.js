"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/export-to-csv";
exports.ids = ["vendor-chunks/export-to-csv"];
exports.modules = {

/***/ "(ssr)/./node_modules/export-to-csv/output/index.js":
/*!****************************************************!*\
  !*** ./node_modules/export-to-csv/output/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asString: () => (/* binding */ asString),\n/* harmony export */   download: () => (/* binding */ download),\n/* harmony export */   generateCsv: () => (/* binding */ generateCsv),\n/* harmony export */   mkConfig: () => (/* binding */ mkConfig)\n/* harmony export */ });\nconst defaults = {\n    fieldSeparator: \",\",\n    decimalSeparator: \".\",\n    quoteStrings: true,\n    quoteCharacter: '\"',\n    showTitle: false,\n    title: \"My Generated Report\",\n    filename: \"generated\",\n    showColumnHeaders: true,\n    useTextFile: false,\n    useBom: true,\n    columnHeaders: [],\n    useKeysAsHeaders: false,\n    boolDisplay: { true: \"TRUE\", false: \"FALSE\" },\n};\nconst endOfLine = \"\\r\\n\";\nconst byteOrderMark = \"\\ufeff\";\nconst mkConfig = (opts) => Object.assign({}, defaults, opts);\n\nclass CsvGenerationError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"CsvGenerationError\";\n    }\n}\nclass EmptyHeadersError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"EmptyHeadersError\";\n    }\n}\nclass CsvDownloadEnvironmentError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"CsvDownloadEnvironmentError\";\n    }\n}\n\nconst pack = (value) => value;\nconst unpack = (newtype) => newtype;\nconst mkCsvOutput = (pack);\nconst mkCsvRow = (pack);\n\nconst thread = (initialValue, ...fns) => fns.reduce((r, fn) => fn(r), initialValue);\nconst addBOM = (config) => (output) => config.useBom ? mkCsvOutput(unpack(output) + byteOrderMark) : output;\nconst addTitle = (config) => (output) => config.showTitle ? mkCsvOutput(unpack(output) + config.title) : output;\nconst addEndOfLine = (output) => (row) => mkCsvOutput(unpack(output) + unpack(row) + endOfLine);\nconst buildRow = (config) => (row, data) => addFieldSeparator(config)(mkCsvRow(row + data));\nconst addFieldSeparator = (config) => (output) => pack(unpack(output) + config.fieldSeparator);\nconst addHeaders = (config, headers) => (output) => {\n    if (!config.showColumnHeaders) {\n        return output;\n    }\n    if (headers.length < 1) {\n        throw new EmptyHeadersError(\"Option to show headers but none supplied. Make sure there are keys in your collection or that you've supplied headers through the config options.\");\n    }\n    let row = mkCsvRow(\"\");\n    for (let keyPos = 0; keyPos < headers.length; keyPos++) {\n        row = buildRow(config)(row, headers[keyPos]);\n    }\n    row = mkCsvRow(unpack(row).slice(0, -1));\n    return addEndOfLine(output)(row);\n};\nconst addBody = (config, headers, bodyData) => (output) => {\n    let body = output;\n    for (var i = 0; i < bodyData.length; i++) {\n        let row = mkCsvRow(\"\");\n        for (let keyPos = 0; keyPos < headers.length; keyPos++) {\n            const header = headers[keyPos];\n            row = buildRow(config)(row, formatData(config, bodyData[i][header]));\n        }\n        // Remove trailing comma\n        row = mkCsvRow(unpack(row).slice(0, -1));\n        body = addEndOfLine(body)(row);\n    }\n    return body;\n};\n/**\n *\n * Convert CsvOutput => string for the typechecker.\n *\n * Useful if you need to take the return value and\n * treat is as a string in the rest of your program.\n */\nconst asString = (unpack);\nconst isFloat = (input) => +input === input && (!isFinite(input) || Boolean(input % 1));\nconst formatData = (config, data) => {\n    if (config.decimalSeparator === \"locale\" && isFloat(data)) {\n        return data.toLocaleString();\n    }\n    if (config.decimalSeparator !== \".\" && isFloat(data)) {\n        return data.toString().replace(\".\", config.decimalSeparator);\n    }\n    if (typeof data === \"string\") {\n        let val = data;\n        if (config.quoteStrings ||\n            data.indexOf(config.fieldSeparator) > -1 ||\n            data.indexOf(\"\\n\") > -1 ||\n            data.indexOf(\"\\r\") > -1) {\n            val = config.quoteCharacter + data + config.quoteCharacter;\n        }\n        return val;\n    }\n    if (typeof data === \"boolean\") {\n        // Convert to string to use as lookup in config\n        const asStr = data ? \"true\" : \"false\";\n        // Return the custom boolean display if set\n        return config.boolDisplay[asStr];\n    }\n    return data;\n};\n\n/**\n *\n * Generates CsvOutput data from JSON collection using\n * ConfigOptions given.\n *\n * To comfortably use the data as a string around your\n * application, look at {@link asString}.\n *\n * @throws {CsvGenerationError | EmptyHeadersError}\n */\nconst generateCsv = (config) => (data) => {\n    const withDefaults = mkConfig(config);\n    const headers = withDefaults.useKeysAsHeaders\n        ? Object.keys(data[0])\n        : withDefaults.columnHeaders;\n    // Build csv output starting with an empty string\n    let output = thread(mkCsvOutput(\"\"), addBOM(withDefaults), addTitle(withDefaults), addHeaders(withDefaults, headers), addBody(withDefaults, headers, data));\n    if (unpack(output).length < 1) {\n        throw new CsvGenerationError(\"Output is empty. Is your data formatted correctly?\");\n    }\n    return output;\n};\n/**\n *\n * **Only supported in browser environment.**\n *\n * Will create a hidden anchor link in the page with the\n * download attribute set to a blob version of the CsvOutput data.\n *\n * @throws {CsvDownloadEnvironmentError}\n */\nconst download = (config) => (csvOutput) => {\n    // Downloading is only supported in a browser environment.\n    // Node users can simply write the output from generateCsv\n    // to disk.\n    if (!window) {\n        throw new CsvDownloadEnvironmentError(\"Downloading only supported in a browser environment.\");\n    }\n    const withDefaults = mkConfig(config);\n    const data = unpack(csvOutput);\n    // Create blob from CsvOutput either as text or csv file.\n    const fileType = withDefaults.useTextFile ? \"plain\" : \"csv\";\n    const fileExtension = withDefaults.useTextFile ? \"txt\" : \"csv\";\n    let blob = new Blob([data], {\n        type: `text/${fileType};charset=utf8;`,\n    });\n    // Create link element in the browser and set the download\n    // attribute to the blob that was created.\n    let link = document.createElement(\"a\");\n    link.download = `${withDefaults.filename}.${fileExtension}`;\n    link.href = URL.createObjectURL(blob);\n    // Ensure the link isn't visible to the user or cause layout shifts.\n    link.setAttribute(\"visibility\", \"hidden\");\n    // Add to document body, click and remove it.\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n};\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/export-to-csv/output/index.js\n");

/***/ })

};
;